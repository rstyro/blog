<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>帅大叔的博客</title>
  
  <subtitle>信你所信，为你所见</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://rstyro.github.io/blog/"/>
  <updated>2019-01-13T03:09:21.771Z</updated>
  <id>https://rstyro.github.io/blog/</id>
  
  <author>
    <name>rstyro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo-笔记</title>
    <link href="https://rstyro.github.io/blog/2019/01/10/Hexo-%E7%AC%94%E8%AE%B0/"/>
    <id>https://rstyro.github.io/blog/2019/01/10/Hexo-笔记/</id>
    <published>2019-01-10T10:37:24.000Z</published>
    <updated>2019-01-13T03:09:21.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前置条件"><a href="#一、前置条件" class="headerlink" title="一、前置条件"></a>一、前置条件</h2><h4 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h4><blockquote><p>下载地址：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p></blockquote><h4 id="2、安装Node-js"><a href="#2、安装Node-js" class="headerlink" title="2、安装Node.js"></a>2、安装Node.js</h4><blockquote><p>下载地址：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p></blockquote><h2 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 hexo</span></span><br><span class="line">npm install -g hexo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否安装成功，查看版本号</span></span><br><span class="line">hexo -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化Hexo，在当前目录下，创建一个文件夹为blog 的博客</span></span><br><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成静态文件</span></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动,默认访问：http://localhost:4000/</span></span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除缓存，和已生成的静态文件</span></span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h2 id="三、修改主题"><a href="#三、修改主题" class="headerlink" title="三、修改主题"></a>三、修改主题</h2><p>以下都是以next主题为例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以在https://hexo.io/themes/可以查看你喜欢的主题,然后 clone 到themes文件夹下即可,比如next 主题</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><h2 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h2><h3 id="一、基本配置"><a href="#一、基本配置" class="headerlink" title="一、基本配置"></a>一、基本配置</h3><p>编辑文件路径站点根目录 <code>/</code>下 <code>_config.yml</code></p><table><thead><tr><th style="text-align:right">字段</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:right">title</td><td>博客的名称。</td></tr><tr><td style="text-align:right">subtitle</td><td>根据主题的不同，有的会显示有的不会显示。</td></tr><tr><td style="text-align:right">description</td><td>主要用于SEO，告诉搜索引擎一个关于站点的简单描述，通常建议在其中包含网站的关键词。</td></tr><tr><td style="text-align:right">author</td><td>作者名称，用于主题显示文章的作者。</td></tr><tr><td style="text-align:right">language</td><td>语言会对应的解析正在应用的主题中的languages文件夹下的不同语言文件。所以这里的名称要和languages文件夹下的语言文件名称一致。</td></tr><tr><td style="text-align:right">timezone</td><td>Asia/Shanghai //可不填写。</td></tr></tbody></table><h3 id="二、主题基本配置"><a href="#二、主题基本配置" class="headerlink" title="二、主题基本配置"></a>二、主题基本配置</h3><p>修改主题配置文件，在菜单项添加以下内容(把注释打开即可)<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable/Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line"><span class="attr">  icons:</span> <span class="literal">false</span><span class="comment">#是否显示Icon</span></span><br><span class="line"><span class="attr">  badges:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h3 id="三、新建页面"><a href="#三、新建页面" class="headerlink" title="三、新建页面"></a>三、新建页面</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page about</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><h3 id="四、设置头像"><a href="#四、设置头像" class="headerlink" title="四、设置头像"></a>四、设置头像</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># in theme directory(source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># in site  directory(source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line"><span class="attr">  url:</span> <span class="comment">#你的头像地址</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line"><span class="attr">  rounded:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span></span><br><span class="line"><span class="attr">  opacity:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line"><span class="attr">  rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="五、修改底部"><a href="#五、修改底部" class="headerlink" title="五、修改底部"></a>五、修改底部</h3><p>去掉 <code>由 Hexo 强力驱动 v3.8.0 | 主题 – NexT.Muse v6.7.0</code><br>打开主题的<code>_config.yml</code> 配置文件，找到如下信息，把<code>enable:true</code> 改为 <code>enable:false</code><br>把powered 与<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If not defined, `author` from Hexo main config will be used.</span></span><br><span class="line"><span class="attr">copyright:</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------</span></span><br><span class="line"><span class="attr">powered:</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Version info of Hexo after Hexo link (vX.X.X).</span></span><br><span class="line"><span class="attr">  version:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">theme:</span></span><br><span class="line">  <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line"><span class="attr">  version:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Beian icp information for Chinese users. In China, every legal website should have a beian icp in website footer.</span></span><br><span class="line"><span class="comment"># http://www.miitbeian.gov.cn</span></span><br><span class="line"><span class="attr">beian:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  icp:</span></span><br></pre></td></tr></table></figure></p><h3 id="六、添加顶部加载"><a href="#六、添加顶部加载" class="headerlink" title="六、添加顶部加载"></a>六、添加顶部加载</h3><p>在<code>\themes\next\layout\_custom head.swig</code>文件中添加如下代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/pace/1.0.2/pace.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .pace .pace-progress &#123;</span></span><br><span class="line"><span class="undefined">  background: #1E92FB; /*进度条颜色*/</span></span><br><span class="line"><span class="undefined">  height: 3px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  .pace .pace-progress-inner &#123;</span></span><br><span class="line"><span class="undefined">   box-shadow: 0 0 10px #1E92FB, 0 0 5px     #1E92FB; /*阴影颜色*/</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  .pace .pace-activity &#123;</span></span><br><span class="line"><span class="undefined">  border-top-color: #1E92FB;    /*上边框颜色*/</span></span><br><span class="line"><span class="undefined">  border-left-color: #1E92FB;    /*左边框颜色*/</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="七、文章添加阴影"><a href="#七、文章添加阴影" class="headerlink" title="七、文章添加阴影"></a>七、文章添加阴影</h3><p>在 <code>themes\next\source\css\_custom\custom.styl</code> 添加如下代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> <span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 203, .5);</span><br><span class="line">   <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="八、在文章末尾添加“文章结束”标记"><a href="#八、在文章末尾添加“文章结束”标记" class="headerlink" title="八、在文章末尾添加“文章结束”标记"></a>八、在文章末尾添加“文章结束”标记</h3><h5 id="1、在路径-themes-next-layout-macro-文件夹中新建-passage-end-tag-swig-文件"><a href="#1、在路径-themes-next-layout-macro-文件夹中新建-passage-end-tag-swig-文件" class="headerlink" title="1、在路径 \themes\next\layout\_macro 文件夹中新建 passage-end-tag.swig 文件"></a>1、在路径 <code>\themes\next\layout\_macro</code> 文件夹中新建 <code>passage-end-tag.swig</code> 文件</h5><p>添加内容如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="2、打开-themes-next-layout-macro-post-swig文件，在post-body后，post-footer前，添加下面内容："><a href="#2、打开-themes-next-layout-macro-post-swig文件，在post-body后，post-footer前，添加下面内容：" class="headerlink" title="2、打开\themes\next\layout_macro\post.swig文件，在post-body后，post-footer前，添加下面内容："></a>2、打开\themes\next\layout_macro\post.swig文件，在post-body后，post-footer前，添加下面内容：</h5><p>添加内容如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include 'passage-end-tag.swig' %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>放的位置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   &#123;#####################&#125;</span><br><span class="line">   &#123;### END POST BODY ###&#125;</span><br><span class="line">   &#123;#####################&#125;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">&#123;% if not is_index %&#125;</span><br><span class="line">&#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h5 id="3、打开主题配置文件（-config-yml-在末尾添加："><a href="#3、打开主题配置文件（-config-yml-在末尾添加：" class="headerlink" title="3、打开主题配置文件（_config.yml),在末尾添加："></a>3、打开主题配置文件（_config.yml),在末尾添加：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure><blockquote><p>如果出现乱码，记得把 <code>passage-end-tag.swig</code> 文件 用类似 <code>Notepad++</code> 的工具转成UTF-8 </p></blockquote><h3 id="九、底部标签样式"><a href="#九、底部标签样式" class="headerlink" title="九、底部标签样式"></a>九、底部标签样式</h3><p>修改<code>\themes\next\layout\_macro\post.swig</code> 中文件，command+f搜索<code>rel=&quot;tag&quot;&gt;#</code>，将#替换成<i class="fa fa-tag"></i>,修改后，片段代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">      &#123;% if post.tags and post.tags.length and not is_index %&#125;</span><br><span class="line">        &lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">          &#123;% for tag in post.tags %&#125;</span><br><span class="line">            &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="十、文章底部加版权"><a href="#十、文章底部加版权" class="headerlink" title="十、文章底部加版权"></a>十、文章底部加版权</h3><h5 id="1、手动修改主题目录下的-themes-next-layout-macro-post-swig-文件，找到-post-footer-所在的标签，添加以下内容："><a href="#1、手动修改主题目录下的-themes-next-layout-macro-post-swig-文件，找到-post-footer-所在的标签，添加以下内容：" class="headerlink" title="1、手动修改主题目录下的 \themes\next\layout\_macro\post.swig 文件，找到 post-footer 所在的标签，添加以下内容："></a>1、手动修改主题目录下的 <code>\themes\next\layout\_macro\post.swig</code> 文件，找到 post-footer 所在的标签，添加以下内容：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;    </span><br><span class="line"> &#123;# 此处判断是否在索引列表中 #&#125;</span><br><span class="line"> &#123;% if not is_index %&#125;</span><br><span class="line">&lt;ul class=&quot;post-copyright&quot;&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-author&quot;&gt;</span><br><span class="line">      &lt;strong&gt;本文作者：&lt;/strong&gt;&#123;&#123; theme.author &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-link&quot;&gt;</span><br><span class="line">    &lt;strong&gt;本文链接：&lt;/strong&gt;</span><br><span class="line">    &lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.path &#125;&#125;&lt;/a&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-license&quot;&gt;</span><br><span class="line">    &lt;strong&gt;版权： &lt;/strong&gt;</span><br><span class="line">    转载注明出处！</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="2、添加样式"><a href="#2、添加样式" class="headerlink" title="2、添加样式"></a>2、添加样式</h5><p>在 <code>\themes\next\source\css\_custom\custom.styl</code> 文件,添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.post-copyright &#123;</span><br><span class="line">    margin: 1em 0 0;</span><br><span class="line">    padding: 0.5em 1em;</span><br><span class="line">    border-left: 3px solid #ff1700;</span><br><span class="line">    background-color: #f9f9f9;</span><br><span class="line">    list-style: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="十一、添加评论"><a href="#十一、添加评论" class="headerlink" title="十一、添加评论"></a>十一、添加评论</h3><h4 id="注册Leancloud"><a href="#注册Leancloud" class="headerlink" title="注册Leancloud"></a>注册Leancloud</h4><blockquote><p>官网：<a href="https://leancloud.cn/" target="_blank" rel="noopener">https://leancloud.cn/</a></p></blockquote><p>修改主题配置文件<code>_config.xml</code> 查找Valine ,如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># More info available at https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.</span></span><br><span class="line"><span class="attr">  appid:</span> <span class="string">你的appid</span> <span class="comment"># your leancloud application appid</span></span><br><span class="line"><span class="attr">  appkey:</span> <span class="string">你的appkey</span> <span class="comment"># your leancloud application appkey</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier, See: https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">来都来了，不说几句就走，过分了啊！！！</span> <span class="comment"># comment box placeholder</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br></pre></td></tr></table></figure></p><h3 id="十二、压缩"><a href="#十二、压缩" class="headerlink" title="十二、压缩"></a>十二、压缩</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm i gulp gulp-debug gulp-clean-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp-imagemin gulp-changed gulp-if gulp-plumber run-sequence del -s</span><br></pre></td></tr></table></figure><p>在根目录下创建<code>gulpfile.js</code>文件。编辑内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp        = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> debug       = <span class="built_in">require</span>(<span class="string">'gulp-debug'</span>);</span><br><span class="line"><span class="keyword">var</span> cleancss    = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>); <span class="comment">//css压缩组件</span></span><br><span class="line"><span class="keyword">var</span> uglify      = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);    <span class="comment">//js压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlmin     = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);   <span class="comment">//html压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlclean   = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>); <span class="comment">//html清理组件</span></span><br><span class="line"><span class="keyword">var</span> imagemin    = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);  <span class="comment">//图片压缩组件</span></span><br><span class="line"><span class="keyword">var</span> changed     = <span class="built_in">require</span>(<span class="string">'gulp-changed'</span>);   <span class="comment">//文件更改校验组件</span></span><br><span class="line"><span class="keyword">var</span> gulpif      = <span class="built_in">require</span>(<span class="string">'gulp-if'</span>)         <span class="comment">//任务 帮助调用组件</span></span><br><span class="line"><span class="keyword">var</span> plumber     = <span class="built_in">require</span>(<span class="string">'gulp-plumber'</span>);   <span class="comment">//容错组件（发生错误不跳出任务，并报出错误内容）</span></span><br><span class="line"><span class="keyword">var</span> runSequence = <span class="built_in">require</span>(<span class="string">'run-sequence'</span>);   <span class="comment">//异步执行组件</span></span><br><span class="line"><span class="keyword">var</span> isScriptAll = <span class="literal">true</span>;  <span class="comment">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span></span><br><span class="line"><span class="keyword">var</span> isDebug     = <span class="literal">true</span>;  <span class="comment">//是否调试显示 编译通过的文件</span></span><br><span class="line"><span class="keyword">var</span> del         = <span class="built_in">require</span>(<span class="string">'del'</span>);</span><br><span class="line"><span class="keyword">var</span> Hexo        = <span class="built_in">require</span>(<span class="string">'hexo'</span>);</span><br><span class="line"><span class="keyword">var</span> hexo        = <span class="keyword">new</span> Hexo(process.cwd(), &#123;&#125;); <span class="comment">// 初始化一个hexo对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除public文件夹</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> del([<span class="string">'public/**/*'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建静态页面 （等同 hexo generate）</span></span><br><span class="line">gulp.task(<span class="string">'generate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'generate'</span>, &#123;</span><br><span class="line">            watch: <span class="literal">false</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hexo.exit();</span><br><span class="line">        &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动Hexo服务器</span></span><br><span class="line">gulp.task(<span class="string">'server'</span>,  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'server'</span>, &#123;&#125;);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署到服务器</span></span><br><span class="line">gulp.task(<span class="string">'deploy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'deploy'</span>, &#123;</span><br><span class="line">            watch: <span class="literal">false</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hexo.exit();</span><br><span class="line">        &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的js文件</span></span><br><span class="line">gulp.task(<span class="string">'compressJs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> option = &#123;</span><br><span class="line">        <span class="comment">// preserveComments: 'all',//保留所有注释</span></span><br><span class="line">        mangle: <span class="literal">true</span>,           <span class="comment">//类型：Boolean 默认：true 是否修改变量名</span></span><br><span class="line">        compress: <span class="literal">true</span>          <span class="comment">//类型：Boolean 默认：true 是否完全压缩</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./public/**/*.js'</span>,<span class="string">'!./public/**/*.min.js'</span>])  <span class="comment">//排除的js</span></span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">'./public'</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug,debug(&#123;<span class="attr">title</span>: <span class="string">'Compress JS:'</span>&#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(uglify(option))                <span class="comment">//调用压缩组件方法uglify(),对合并的文件进行压缩</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));         <span class="comment">//输出到目标目录</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的css文件</span></span><br><span class="line">gulp.task(<span class="string">'compressCss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> option = &#123;</span><br><span class="line">        rebase: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//advanced: true,               //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class="line">        compatibility: <span class="string">'ie7'</span>,         <span class="comment">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></span><br><span class="line">        <span class="comment">//keepBreaks: true,             //类型：Boolean 默认：false [是否保留换行]</span></span><br><span class="line">        <span class="comment">//keepSpecialComments: '*'      //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./public/**/*.css'</span>,<span class="string">'!./public/**/*.min.css'</span>])  <span class="comment">//排除的css</span></span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">'./public'</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug,debug(&#123;<span class="attr">title</span>: <span class="string">'Compress CSS:'</span>&#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(cleancss(option))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的html文件</span></span><br><span class="line">gulp.task(<span class="string">'compressHtml'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cleanOptions = &#123;</span><br><span class="line">        protect: <span class="regexp">/&lt;\!--%fooTemplate\b.*?%--&gt;/g</span>,             <span class="comment">//忽略处理</span></span><br><span class="line">        unprotect: <span class="regexp">/&lt;script [^&gt;]*\btype="text\/x-handlebars-template"[\s\S]+?&lt;\/script&gt;/ig</span> <span class="comment">//特殊处理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> minOption = &#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,           <span class="comment">//压缩HTML</span></span><br><span class="line">        collapseBooleanAttributes: <span class="literal">true</span>,    <span class="comment">//省略布尔属性的值  &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        removeEmptyAttributes: <span class="literal">true</span>,        <span class="comment">//删除所有空格作属性值    &lt;input id="" /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        removeScriptTypeAttributes: <span class="literal">true</span>,   <span class="comment">//删除&lt;script&gt;的type="text/javascript"</span></span><br><span class="line">        removeStyleLinkTypeAttributes: <span class="literal">true</span>,<span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type="text/css"</span></span><br><span class="line">        removeComments: <span class="literal">true</span>,               <span class="comment">//清除HTML注释</span></span><br><span class="line">        minifyJS: <span class="literal">true</span>,                     <span class="comment">//压缩页面JS</span></span><br><span class="line">        minifyCSS: <span class="literal">true</span>,                    <span class="comment">//压缩页面CSS</span></span><br><span class="line">        minifyURLs: <span class="literal">true</span>                    <span class="comment">//替换页面URL</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(gulpif(isDebug,debug(&#123;<span class="attr">title</span>: <span class="string">'Compress HTML:'</span>&#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(htmlclean(cleanOptions))</span><br><span class="line">        .pipe(htmlmin(minOption))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/uploads 目录内图片</span></span><br><span class="line">gulp.task(<span class="string">'compressImage'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> option = &#123;</span><br><span class="line">        optimizationLevel: <span class="number">5</span>, <span class="comment">//类型：Number  默认：3  取值范围：0-7（优化等级）</span></span><br><span class="line">        progressive: <span class="literal">true</span>,    <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class="line">        interlaced: <span class="literal">false</span>,    <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class="line">        multipass: <span class="literal">false</span>      <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/uploads/**/*.*'</span>)</span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">'./public/uploads'</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug,debug(&#123;<span class="attr">title</span>: <span class="string">'Compress Images:'</span>&#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(imagemin(option))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public/uploads'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用run-sequence并发执行，同时处理html，css，js，img</span></span><br><span class="line">gulp.task(<span class="string">'compress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    runSequence.options.ignoreUndefinedTasks = <span class="literal">true</span>;</span><br><span class="line">    runSequence([<span class="string">'compressHtml'</span>, <span class="string">'compressCss'</span>, <span class="string">'compressJs'</span>],cb);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器</span></span><br><span class="line">gulp.task(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    runSequence.options.ignoreUndefinedTasks = <span class="literal">true</span>;</span><br><span class="line">    runSequence(<span class="string">'clean'</span>, <span class="string">'generate'</span>, <span class="string">'compress'</span>, <span class="string">'deploy'</span>, cb);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, </span><br><span class="line">gulp.series(<span class="string">'clean'</span>,<span class="string">'generate'</span>,</span><br><span class="line">gulp.parallel(<span class="string">'compressHtml'</span>,<span class="string">'compressCss'</span>,<span class="string">'compressImage'</span>)</span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="十三、Hexo-新建文章插入图片"><a href="#十三、Hexo-新建文章插入图片" class="headerlink" title="十三、Hexo 新建文章插入图片"></a>十三、Hexo 新建文章插入图片</h3><h5 id="安装图片插件"><a href="#安装图片插件" class="headerlink" title="安装图片插件"></a>安装图片插件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><blockquote><p>如果控制台出现如下信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">found 1 low severity vulnerability</span><br><span class="line">  run `npm audit fix` to fix them, or `npm audit` for details</span><br></pre></td></tr></table></figure><p>记得修复相关介绍如下</p><blockquote><p>npm audit ： <a href="mailto:npm@5.10.0" target="_blank" rel="noopener">npm@5.10.0</a> &amp; npm@6，允许开发人员分析复杂的代码，并查明特定的漏洞和缺陷。<br>npm audit fix ：<a href="mailto:npm@6.1.0" target="_blank" rel="noopener">npm@6.1.0</a>,  检测项目依赖中的漏洞并自动安装需要更新的有漏洞的依赖，而不必再自己进行跟踪和修复。</p></blockquote><h5 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 修复命令</span><br><span class="line">npm audit fix</span><br></pre></td></tr></table></figure><h5 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h5><p>当插件安装成功后，你新建文章<br>例：<code>hexo new &quot;Hexo笔记&quot;</code>，则在<code>\source\_posts</code> 会有一个名为 <code>Hexo笔记</code> 的文件夹<br>只需把图片放里面即可引用<br>1、把主页配置文件 <code>_config.yml</code> 里的<code>post_asset_folder:</code>这个选项设置为 <code>true</code><br>2、然后只需要在 <code>Hexo笔记.md</code> 中按照markdown的格式引入图片：<code>![你想输入的替代文字](/Hexo笔记/你要引用的图片名称.jpg)</code></p><h3 id="十四、添加本地搜索"><a href="#十四、添加本地搜索" class="headerlink" title="十四、添加本地搜索"></a>十四、添加本地搜索</h3><h5 id="1、安装插件"><a href="#1、安装插件" class="headerlink" title="1、安装插件"></a>1、安装插件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><h5 id="2、站点配置文件-config-yml"><a href="#2、站点配置文件-config-yml" class="headerlink" title="2、站点配置文件_config.yml"></a>2、站点配置文件<code>_config.yml</code></h5><p>在最后编辑或添加如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">    path: search.xml</span><br><span class="line">    field: post</span><br><span class="line">    format: html</span><br><span class="line">    limit: 5000</span><br></pre></td></tr></table></figure></p><h5 id="3、打开主题配置文件"><a href="#3、打开主题配置文件" class="headerlink" title="3、打开主题配置文件"></a>3、打开主题配置文件</h5><p>在<code>\themes\next\_config.yml</code> 查找<code>local_search</code> 修改如下<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="五、部署到GitHub"><a href="#五、部署到GitHub" class="headerlink" title="五、部署到GitHub"></a>五、部署到GitHub</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>在Github 创建一个仓库为blog,并从master 分支，新建一个dev分支<br>dev 分支就是我们的源代码分支，master,就是我们生成的静态文件。</p><h3 id="一、安装Git部署插件"><a href="#一、安装Git部署插件" class="headerlink" title="一、安装Git部署插件"></a>一、安装Git部署插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装git 部署插件</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="二、修改站点配置文件"><a href="#二、修改站点配置文件" class="headerlink" title="二、修改站点配置文件"></a>二、修改站点配置文件</h3><p>修改 配置文件 <code>_config.yml</code> 在<code>deploy</code> 选项,修改如下<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/rstyro/blog.git</span><span class="comment"># 你的github 仓库地址</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p><h3 id="三、多台终端部署"><a href="#三、多台终端部署" class="headerlink" title="三、多台终端部署"></a>三、多台终端部署</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时在另一终端更新博客，只需要将Github的dev分支clone下来，进行初次的相关配置</span></span><br><span class="line">git <span class="built_in">clone</span> -b dev https://github.com/rstyro/blog.git  //将Github中hexo分支<span class="built_in">clone</span>到本地</span><br><span class="line"><span class="built_in">cd</span>  blog  //切换到刚刚<span class="built_in">clone</span>的文件夹内</span><br><span class="line">npm install    //注意，这里一定要切换到刚刚<span class="built_in">clone</span>的文件夹内执行，安装必要的所需组件，不用再init</span><br><span class="line">hexo new post <span class="string">"new blog name"</span>   //新建一个.md文件，并编辑完成自己的博客内容</span><br><span class="line">git add <span class="built_in">source</span>  //经测试每次只要更新sorcerer中的文件到Github中即可，因为只是新建了一篇新博客</span><br><span class="line">git commit -m <span class="string">"XX"</span></span><br><span class="line">git push origin hexo  //更新分支</span><br><span class="line">hexo d -g   //push更新完分支之后将自己写的博客对接到自己搭的博客网站上，同时同步了Github中的master</span><br></pre></td></tr></table></figure><blockquote><p>参考链接：<a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">http://theme-next.iissnan.com</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、前置条件&quot;&gt;&lt;a href=&quot;#一、前置条件&quot; class=&quot;headerlink&quot; title=&quot;一、前置条件&quot;&gt;&lt;/a&gt;一、前置条件&lt;/h2&gt;&lt;h4 id=&quot;1、安装Git&quot;&gt;&lt;a href=&quot;#1、安装Git&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="笔记" scheme="https://rstyro.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Hexo" scheme="https://rstyro.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Neo4j 小记</title>
    <link href="https://rstyro.github.io/blog/2018/10/17/Neo4j%20%E5%B0%8F%E8%AE%B0/"/>
    <id>https://rstyro.github.io/blog/2018/10/17/Neo4j 小记/</id>
    <published>2018-10-17T12:01:30.000Z</published>
    <updated>2019-01-12T14:52:40.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Neo4j下载地址"><a href="#Neo4j下载地址" class="headerlink" title="Neo4j下载地址"></a><a href="https://neo4j.com/download-center/#releases" target="_blank" rel="noopener">Neo4j下载地址</a></h2><h2 id="配置环境变量：NEO4J-HOME"><a href="#配置环境变量：NEO4J-HOME" class="headerlink" title="配置环境变量：NEO4J_HOME"></a>配置环境变量：NEO4J_HOME</h2><h2 id="把neo4j-安装为服务"><a href="#把neo4j-安装为服务" class="headerlink" title="把neo4j 安装为服务"></a>把neo4j 安装为服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 安装服务</span><br><span class="line">neo4j install-service</span><br><span class="line"></span><br><span class="line"># 卸载服务</span><br><span class="line">neo4j uninstall-service</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">neo4j start</span><br><span class="line"></span><br><span class="line"># 停止</span><br><span class="line">neo4j stop</span><br><span class="line"></span><br><span class="line"># 重启</span><br><span class="line">neo4j restart</span><br><span class="line"></span><br><span class="line"># 查询服务状态</span><br><span class="line">neo4j status</span><br></pre></td></tr></table></figure><h4 id="默认的host是bolt-localhost-7687，默认的用户是neo4j，其默认的密码是：neo4j，第一次成功登陆到Neo4j服务器之后，需要重置密码。-访问Graph-Database需要输入身份验证，Host是Bolt协议标识的主机。"><a href="#默认的host是bolt-localhost-7687，默认的用户是neo4j，其默认的密码是：neo4j，第一次成功登陆到Neo4j服务器之后，需要重置密码。-访问Graph-Database需要输入身份验证，Host是Bolt协议标识的主机。" class="headerlink" title="默认的host是bolt://localhost:7687，默认的用户是neo4j，其默认的密码是：neo4j，第一次成功登陆到Neo4j服务器之后，需要重置密码。 访问Graph Database需要输入身份验证，Host是Bolt协议标识的主机。"></a>默认的host是bolt://localhost:7687，默认的用户是neo4j，其默认的密码是：neo4j，第一次成功登陆到Neo4j服务器之后，需要重置密码。 访问Graph Database需要输入身份验证，Host是Bolt协议标识的主机。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 创建一个 Person 对象，别名为a, 名字为 rstyro,年龄为23，性别 男</span><br><span class="line">create (a:Person&#123;name:&quot;rstyro&quot;,age:23,sex:&quot;男&quot;&#125;);</span><br><span class="line">create (a:Person&#123;name:&quot;rstyro&quot;,age:23,sex:&quot;男&quot;&#125;) return a;</span><br><span class="line"></span><br><span class="line"># 一次创建多个 对象，</span><br><span class="line">create (a:Person&#123;name:&quot;rstyro&quot;,age:23,sex:&quot;男&quot;&#125;),(b:Person&#123;name:&quot;老婆&quot;,age:21,sex:&quot;女&quot;&#125;);</span><br><span class="line">create (a:Person&#123;name:&quot;rstyro&quot;,age:23,sex:&quot;男&quot;&#125;),(b:Person&#123;name:&quot;老婆&quot;,age:21,sex:&quot;女&quot;&#125;) return a,b;</span><br><span class="line"></span><br><span class="line"># 修改对象，name 为rstyro 的，修改 age 属性为 168</span><br><span class="line">match (a:Person&#123;name:&quot;rstyro&quot;&#125;) set a.age=168;</span><br><span class="line"></span><br><span class="line"># 删除，清库</span><br><span class="line">MATCH (n) DETACH DELETE n ;</span><br><span class="line"></span><br><span class="line"># 删除 对象，name 为rstyro的</span><br><span class="line">match (n:Person&#123;name:&quot;rstyro&quot;&#125;) delete n;</span><br></pre></td></tr></table></figure><h4 id="创建关系"><a href="#创建关系" class="headerlink" title="创建关系"></a>创建关系</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">create (a:Person&#123;name:&quot;大佬&quot;,sex:&quot;man&quot;&#125;),(b:Person&#123;name:&quot;22222&quot;,sex:&quot;female&quot;&#125;),(c:Person&#123;name:&quot;3333&quot;,sex:&quot;female&quot;&#125;) return a,b,c;</span><br><span class="line">create (p3:Person&#123;name:&quot;4444&quot;,sex:&quot;man&quot;&#125;) return p3;</span><br><span class="line"></span><br><span class="line"># 创建两个关系 DIRECTED 、ACTED_IN</span><br><span class="line">MATCH (oliver:Person &#123; name: &apos;3333&apos; &#125;),(reiner:Person &#123; name: &apos;22222&apos; &#125;)</span><br><span class="line">MERGE (oliver)-[:DIRECTED]-&gt;(movie:Person &#123;name:&quot;4444&quot;,sex:&quot;man&quot;&#125;)&lt;-[:ACTED_IN]-(reiner)</span><br><span class="line">RETURN movie</span><br><span class="line"></span><br><span class="line"># 创建兄弟关系的A、B节点</span><br><span class="line">match(a),(b) where a.id=&apos;502208330941468673&apos; and b.id=&apos;502208330941468672&apos; create (a)-[r:兄弟 &#123;&#125;]-&gt;(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 删除 name=3333 的所有关系链</span><br><span class="line">match (n:Person&#123;name:&quot;3333&quot;&#125;)-[r]-(m:Person) delete r;</span><br><span class="line"></span><br><span class="line"># 删除 name=3333 的所有关系链,和其本身节点</span><br><span class="line">match (n:Person&#123;name:&quot;3333&quot;&#125;)-[r]-(m:Person) delete r,n;</span><br><span class="line"></span><br><span class="line"># 删除 name=3333 的所有关系链与本身节点和相关联的节点</span><br><span class="line">match (n:Person&#123;name:&quot;3333&quot;&#125;)-[r]-(m:Person) delete r,n,m;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Neo4j下载地址&quot;&gt;&lt;a href=&quot;#Neo4j下载地址&quot; class=&quot;headerlink&quot; title=&quot;Neo4j下载地址&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://neo4j.com/download-center/#releases&quot; targe
      
    
    </summary>
    
      <category term="笔记" scheme="https://rstyro.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="干货" scheme="https://rstyro.github.io/blog/tags/%E5%B9%B2%E8%B4%A7/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot(十四)：SpringBoot 国际化配置</title>
    <link href="https://rstyro.github.io/blog/2018/07/26/SpringBoot(%E5%8D%81%E5%9B%9B)%EF%BC%9ASpringBoot%20%E5%9B%BD%E9%99%85%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>https://rstyro.github.io/blog/2018/07/26/SpringBoot(十四)：SpringBoot 国际化配置/</id>
    <published>2018-07-26T10:31:20.000Z</published>
    <updated>2019-01-13T03:51:25.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-国际化配置"><a href="#SpringBoot-国际化配置" class="headerlink" title="SpringBoot 国际化配置"></a>SpringBoot 国际化配置</h1><h2 id="一、配置LocaleResolver"><a href="#一、配置LocaleResolver" class="headerlink" title="一、配置LocaleResolver"></a>一、配置LocaleResolver</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class LocaleConfig extends WebMvcConfigurerAdapter&#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">    public LocaleResolver localeResolver() &#123;</span><br><span class="line">        SessionLocaleResolver slr = new SessionLocaleResolver();</span><br><span class="line">        // 默认语言</span><br><span class="line">        slr.setDefaultLocale(Locale.CHINA);</span><br><span class="line">        return slr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Bean</span><br><span class="line">    public LocaleChangeInterceptor localeChangeInterceptor() &#123;</span><br><span class="line">        LocaleChangeInterceptor lci = new LocaleChangeInterceptor();</span><br><span class="line">        // 参数名</span><br><span class="line">        lci.setParamName(&quot;lang&quot;);</span><br><span class="line">        return lci;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        registry.addInterceptor(localeChangeInterceptor());</span><br><span class="line">        super.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、创建国际化文件"><a href="#二、创建国际化文件" class="headerlink" title="二、创建国际化文件"></a>二、创建国际化文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">messages.properties</span><br><span class="line">messages_zh_CN.properties</span><br><span class="line">messages_en_US.properties</span><br><span class="line">messages_ja_JP.properties</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">内容如下：</span><br><span class="line">top.lrshuai.text=简体</span><br><span class="line">top.lrshuai.name=帅哥</span><br><span class="line">top.lrshuai.age=20</span><br><span class="line">message=国际化</span><br></pre></td></tr></table></figure><h2 id="三、配置国际化文件路径"><a href="#三、配置国际化文件路径" class="headerlink" title="三、配置国际化文件路径"></a>三、配置国际化文件路径</h2><p>在application.yml 配置国际化文件所在位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">    messages:</span><br><span class="line">        encoding: UTF-8  </span><br><span class="line">        cache-seconds: 1  </span><br><span class="line">        basename: static/i18n/messages</span><br></pre></td></tr></table></figure></p><h2 id="四、前端调用"><a href="#四、前端调用" class="headerlink" title="四、前端调用"></a>四、前端调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;language&quot;&gt;</span><br><span class="line">&lt;div th:switch=&quot;$&#123;#locale.getCountry()&#125;&quot;&gt;</span><br><span class="line">&lt;span th:case=&quot;&apos;CN&apos;&quot; &gt;简体中文&lt;/span&gt;</span><br><span class="line">&lt;span th:case=&quot;&apos;TW&apos;&quot; &gt;繁體中文&lt;/span&gt;</span><br><span class="line">&lt;span th:case=&quot;&apos;US&apos;&quot; &gt;English&lt;/span&gt;</span><br><span class="line">&lt;span th:case=&quot;&apos;JP&apos;&quot; &gt;日语&lt;/span&gt;</span><br><span class="line">&lt;span th:case=&quot;&apos;KR&apos;&quot; &gt;韩语&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">        &lt;ul class=&quot;langBody&quot;&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;?lang=zh_CN&quot;&gt;简体中文&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;?lang=zh_TW&quot;&gt;繁體中文&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;?lang=en_US&quot;&gt;English&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;?lang=ja_JP&quot;&gt;日语&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;?lang=ko_KR&quot;&gt;韩语&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;language&quot;&gt;</span><br><span class="line">&lt;div th:text=&quot;#&#123;top.lrshuai.text&#125;&quot;&gt;asdfSW&lt;/div&gt;</span><br><span class="line">&lt;div th:text=&quot;#&#123;top.lrshuai.name&#125;&quot;&gt;asdf&lt;/div&gt;</span><br><span class="line">&lt;div th:text=&quot;#&#123;top.lrshuai.age&#125;&quot;&gt;asdf&lt;/div&gt;</span><br><span class="line">&lt;span th:text=&quot;#&#123;message&#125;&quot;&gt;ffff&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="五、对-ResponseBody-接口返回值拦截"><a href="#五、对-ResponseBody-接口返回值拦截" class="headerlink" title="五、对@ResponseBody 接口返回值拦截"></a>五、对<code>@ResponseBody</code> 接口返回值拦截</h2><h5 id="有一种需求就是对接口的返回值进行拦截-我们需要实现ResponseBodyAdvice-lt-T-gt-接口，代码如下"><a href="#有一种需求就是对接口的返回值进行拦截-我们需要实现ResponseBodyAdvice-lt-T-gt-接口，代码如下" class="headerlink" title="有一种需求就是对接口的返回值进行拦截,我们需要实现ResponseBodyAdvice&lt;T&gt; 接口，代码如下"></a>有一种需求就是对接口的返回值进行拦截,我们需要实现<code>ResponseBodyAdvice&lt;T&gt;</code> 接口，代码如下</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 别忘了加注解，basePackages 是对哪些包进行扫描</span><br><span class="line">*/</span><br><span class="line">@ControllerAdvice(basePackages=&#123;&quot;top.lrshuai.controller&quot;&#125;)</span><br><span class="line">public class I18nResponseAdvice implements ResponseBodyAdvice&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">protected Logger log = LoggerFactory.getLogger(this.getClass());</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean supports(MethodParameter returnType,</span><br><span class="line">Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*这个方法获取到返回数据，对其进行拦截修改即可</span><br><span class="line">*/</span><br><span class="line">@Override</span><br><span class="line">public Object beforeBodyWrite(Object body, MethodParameter returnType,</span><br><span class="line">MediaType selectedContentType,</span><br><span class="line">Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType,</span><br><span class="line">ServerHttpRequest request, ServerHttpResponse response) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">//body 就是返回的数据体</span><br><span class="line">HttpServletRequest req = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line">String value = getMessage(req, &quot;name&quot;);</span><br><span class="line">//TODO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">log.error(&quot;返回值国际化拦截异常&quot;,e);</span><br><span class="line">&#125;</span><br><span class="line">return body;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 返回国际化的值</span><br><span class="line"> * @param request</span><br><span class="line"> * @param key</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public String getMessage(HttpServletRequest request, String key)&#123;</span><br><span class="line">        RequestContext requestContext = new RequestContext(request);</span><br><span class="line">        String value = requestContext.getMessage(key);</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a><a href="https://github.com/rstyro/spring-boot/tree/master/SpringBoot-i18n" target="_blank" rel="noopener">Github地址</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot-国际化配置&quot;&gt;&lt;a href=&quot;#SpringBoot-国际化配置&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot 国际化配置&quot;&gt;&lt;/a&gt;SpringBoot 国际化配置&lt;/h1&gt;&lt;h2 id=&quot;一、配置Local
      
    
    </summary>
    
      <category term="Java" scheme="https://rstyro.github.io/blog/categories/Java/"/>
    
    
      <category term="Spring Boot" scheme="https://rstyro.github.io/blog/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud （十）、Zuul 过滤器</title>
    <link href="https://rstyro.github.io/blog/2018/05/27/SpringCloud%20%EF%BC%88%E5%8D%81%EF%BC%89%E3%80%81Zuul%20%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>https://rstyro.github.io/blog/2018/05/27/SpringCloud （十）、Zuul 过滤器/</id>
    <published>2018-05-27T04:52:07.000Z</published>
    <updated>2019-01-13T05:17:01.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Zuul-过滤器"><a href="#Zuul-过滤器" class="headerlink" title="Zuul 过滤器"></a>Zuul 过滤器</h2><p>Zuul大部分功能都是通过过滤器来实现的。Zuul中定义了四种标准过滤器类型，这些过滤器类型对应于请求的典型生命周期。</p><ul><li><strong>PRE</strong>：这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。</li><li><strong>ROUTING</strong>：这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用Apache HttpClient或Netfilx Ribbon请求微服务。</li><li><strong>POST</strong>：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。</li><li><strong>ERROR</strong>：在其他阶段发生错误时执行该过滤器。</li></ul><p><strong>除了默认的过滤器类型，Zuul还允许我们创建自定义的过滤器类型。例如，我们可以定制一种STATIC类型的过滤器，直接在Zuul中生成响应，而不将请求转发到后端的微服务。</strong></p><p><strong>下面讲的主要是zuul1.x</strong></p><h4 id="SpringCloud-启动过滤器，有两个注解-EnableZuulServer、-EnableZuulProxy"><a href="#SpringCloud-启动过滤器，有两个注解-EnableZuulServer、-EnableZuulProxy" class="headerlink" title="SpringCloud 启动过滤器，有两个注解@EnableZuulServer、@EnableZuulProxy"></a>SpringCloud 启动过滤器，有两个注解<code>@EnableZuulServer</code>、<code>@EnableZuulProxy</code></h4><h3 id="一、-EnableZuulServer过滤器"><a href="#一、-EnableZuulServer过滤器" class="headerlink" title="一、@EnableZuulServer过滤器"></a>一、@EnableZuulServer过滤器</h3><h4 id="1、pre类型过滤器"><a href="#1、pre类型过滤器" class="headerlink" title="1、pre类型过滤器"></a>1、pre类型过滤器</h4><ul><li><p><strong>ServletDetectionFilter</strong>：该过滤器用于检查请求是否通过<code>Spring Dispatcher</code>。检查后，通过<code>isDispatcherServletRequest</code>设置布尔值。</p></li><li><p><strong>FormBodyWrapperFilter</strong>：解析表单数据，并为请求重新编码。</p></li><li><p><strong>DebugFilter</strong>：顾名思义，调试用的过滤器，可以通过<code>zuul.debug.request=true</code>，或在请求时，加上debug=true的参数，例如<code>$ZUUL_HOST:ZUUL_PORT/path?debug=true</code> 开启该过滤器。这样，该过滤器就会把<code>RequestContext.setDebugRouting()</code> 、<code>RequestContext.setDebugRequest()</code>设为true。</p></li></ul><h4 id="2、route类型过滤器"><a href="#2、route类型过滤器" class="headerlink" title="2、route类型过滤器"></a>2、route类型过滤器</h4><p><strong>SendForwardFilter</strong>：该过滤器使用<code>Servlet RequestDispatcher</code>转发请求，转发位置存储在<code>RequestContext.getCurrentContext().get(&quot;forward.to&quot;)</code> 中。可以将路由设置成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    abc: </span><br><span class="line">      path: /abc/**</span><br><span class="line">      url: forward:/abc</span><br></pre></td></tr></table></figure></p><p>然后访问<code>$ZUUL_HOST:ZUUL_PORT/abc</code> ，观察该过滤器的执行过程。</p><h4 id="3、post类型过滤器"><a href="#3、post类型过滤器" class="headerlink" title="3、post类型过滤器"></a>3、post类型过滤器</h4><p><strong>SendResponseFilter</strong>：将Zuul所代理的微服务的的响应写入当前响应。</p><h4 id="4、error类型过滤器"><a href="#4、error类型过滤器" class="headerlink" title="4、error类型过滤器"></a>4、error类型过滤器</h4><p><strong>SendErrorFilter</strong>：如果<code>RequestContext.getThrowable()</code> 不为<code>null</code>，那么默认就会转发到<code>/error</code>，也可以设置<code>error.path</code>属性修改默认的转发路径。</p><h3 id="二、-EnableZuulProxy过滤器"><a href="#二、-EnableZuulProxy过滤器" class="headerlink" title="二、@EnableZuulProxy过滤器"></a>二、@EnableZuulProxy过滤器</h3><p><strong>如果使用注解@EnableZuulProxy，那么除上述过滤器之外，Spring Cloud还会安装以下过滤器：</strong></p><h4 id="一、pre类型过滤器"><a href="#一、pre类型过滤器" class="headerlink" title="一、pre类型过滤器"></a>一、pre类型过滤器</h4><p><strong>PreDecorationFilter</strong>：该过滤器根据提供的<code>RouteLocator</code>确定路由到的地址，以及怎样去路由。该路由器也可为后端请求设置各种代理相关的header。</p><h4 id="二、route类型过滤器"><a href="#二、route类型过滤器" class="headerlink" title="二、route类型过滤器"></a>二、route类型过滤器</h4><ul><li><strong>RibbonRoutingFilter</strong>：该过滤器使用Ribbon，Hystrix和可插拔的HTTP客户端发送请求。<code>serviceId</code>在<code>RequestContext.getCurrentContext().get(&quot;serviceId&quot;)</code> 中。该过滤器可使用不同的HTTP客户端，例如<br><em>Apache HttpClient</em>：默认的HTTP客户端<br><em>Squareup OkHttpClient v3</em>：如需使用该客户端，需保证<code>com.squareup.okhttp3</code>的依赖在classpath中，并设置<code>ribbon.okhttp.enabled = true</code> 。<br><em>Netflix Ribbon HTTP client</em>：设置<code>ribbon.restclient.enabled = true</code> 即可启用该HTTP客户端。需要注意的是，该客户端有一定限制，例如不支持PATCH方法，另外，它有内置的<code>重试机制</code>。</li><li><strong>SimpleHostRoutingFilter</strong>：该过滤器通过Apache HttpClient向指定的URL发送请求。URL在<code>RequestContext.getRouteHost()</code> 中。</li></ul><h3 id="自定义过滤器的代码示例"><a href="#自定义过滤器的代码示例" class="headerlink" title="自定义过滤器的代码示例"></a>自定义过滤器的代码示例</h3><h4 id="1、自定义一个过滤器-MyPreZuulFileter"><a href="#1、自定义一个过滤器-MyPreZuulFileter" class="headerlink" title="1、自定义一个过滤器 MyPreZuulFileter"></a>1、自定义一个过滤器 MyPreZuulFileter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MyPreZuulFileter extends ZuulFilter&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Object run() &#123;</span><br><span class="line">System.out.println(&quot;这个就是你要过滤的重要方法&quot;);</span><br><span class="line">System.out.println(&quot;可以在这里写你的过滤逻辑&quot;);</span><br><span class="line">System.out.println(&quot;比如下面的demo&quot;);</span><br><span class="line">RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">    HttpServletResponse servletResponse = context.getResponse();</span><br><span class="line">servletResponse.addHeader(&quot;X-Foo&quot;, UUID.randomUUID().toString());</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 是否使用这个过滤器，true -- 使用</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public boolean shouldFilter() &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 执行顺序，返回的数字越大越靠后</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public int filterOrder() &#123;</span><br><span class="line">return 7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 过滤的类型</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public String filterType() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">/**</span><br><span class="line"> * 有4种：</span><br><span class="line"> * pre</span><br><span class="line"> * post</span><br><span class="line"> * route</span><br><span class="line"> * error</span><br><span class="line"> * </span><br><span class="line"> * 可以看spring-clou-netflix-core-1.3.6RELEASE.jar下的</span><br><span class="line"> * org.springframework.cloud.netflix.zuul.filters.support.FilterConstants 这个类</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">return &quot;pre&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、加注解"><a href="#2、加注解" class="headerlink" title="2、加注解"></a>2、加注解</h4><p>在启动类加<code>@EnableZuulProxy</code>注解,并注入上面自定义的bean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableZuulProxy</span><br><span class="line">public class SpringcloudZuulFilterApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringcloudZuulFilterApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public MyPreZuulFileter myPreZuulFileter() &#123;</span><br><span class="line">return new MyPreZuulFileter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整的 <a href="https://github.com/rstyro/SpringCloud/tree/master/SpringCloud-zuul-filter" target="_blank" rel="noopener">Github代码地址</a><br>请求服务时，拦截</p><p><img src="/blog/2018/05/27/SpringCloud （十）、Zuul 过滤器/13624.png" alt=""><br>参考链接：<br><a href="https://github.com/Netflix/zuul/wiki/How-It-Works" target="_blank" rel="noopener">https://github.com/Netflix/zuul/wiki/How-It-Works</a>、<br><a href="http://www.itmuch.com/spring-cloud/zuul/zuul-filter-in-spring-cloud/" target="_blank" rel="noopener">http://www.itmuch.com/spring-cloud/zuul/zuul-filter-in-spring-cloud/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Zuul-过滤器&quot;&gt;&lt;a href=&quot;#Zuul-过滤器&quot; class=&quot;headerlink&quot; title=&quot;Zuul 过滤器&quot;&gt;&lt;/a&gt;Zuul 过滤器&lt;/h2&gt;&lt;p&gt;Zuul大部分功能都是通过过滤器来实现的。Zuul中定义了四种标准过滤器类型，这些过滤器类型
      
    
    </summary>
    
      <category term="Java" scheme="https://rstyro.github.io/blog/categories/Java/"/>
    
    
      <category term="SpringCloud" scheme="https://rstyro.github.io/blog/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud （九）、Zuul 回退</title>
    <link href="https://rstyro.github.io/blog/2018/05/27/SpringCloud%20%EF%BC%88%E4%B9%9D%EF%BC%89%E3%80%81Zuul%20%E5%9B%9E%E9%80%80/"/>
    <id>https://rstyro.github.io/blog/2018/05/27/SpringCloud （九）、Zuul 回退/</id>
    <published>2018-05-27T04:41:48.000Z</published>
    <updated>2019-01-12T14:49:03.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Zuul-的回退"><a href="#一、Zuul-的回退" class="headerlink" title="一、Zuul 的回退"></a>一、Zuul 的回退</h2><p>Zuul 本身就有断路器的功能<br>很简单只需自定义一个<code>ZuulFallbackProvider</code>即可，在实现这个ZuulFallbackProvider的<code>getRoute()</code>方法中定义你的服务名称。下面是简单的示例<br>我这个是<code>producer</code>这个微服务的fallback<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MyFallbackProvider implements ZuulFallbackProvider &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 这个是你要配置的是那个微服务</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public String getRoute() &#123;</span><br><span class="line">return &quot;producer&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 这个是服务器端返回的数据体，</span><br><span class="line"> * 可以自己定义重写</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public ClientHttpResponse fallbackResponse() &#123;</span><br><span class="line">return new ClientHttpResponse() &#123;</span><br><span class="line">@Override</span><br><span class="line">public HttpStatus getStatusCode() throws IOException &#123;</span><br><span class="line">return HttpStatus.OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int getRawStatusCode() throws IOException &#123;</span><br><span class="line">return 200;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String getStatusText() throws IOException &#123;</span><br><span class="line">return &quot;OK&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void close() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * fallback 返回的信息</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public InputStream getBody() throws IOException &#123;</span><br><span class="line">return new ByteArrayInputStream(&quot;这个就是当服务掉掉的时候，返回的是这个数据&quot;.getBytes(&quot;utf-8&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public HttpHeaders getHeaders() &#123;</span><br><span class="line">HttpHeaders headers = new HttpHeaders();</span><br><span class="line">headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">return headers;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我上面这个是<code>Dalston.SR5</code> 版本的，为什么用这个版本，刚学的时候，感觉这个版本名称比较亲切不知道为啥。</p><p>如果 Edgware及更高版本的话，回退是这样的<br><code>FallbackProvider</code>是<code>ZuulFallbackProvider</code>的子接口。<br><code>ZuulFallbackProvider</code>已经被标注<code>Deprecated</code>，很可能在未来的版本中被删除。<br><code>FallbackProvider</code>接口比<code>ZuulFallbackProvider</code>多了一个<code>ClientHttpResponse fallbackResponse(Throwable cause)</code>方法，使用该方法，可获得造成回退的原因<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MyFallbackProvider implements FallbackProvider &#123;</span><br><span class="line">  @Override</span><br><span class="line">  public String getRoute() &#123;</span><br><span class="line">    // 表明是为哪个微服务提供回退，*表示为所有微服务提供回退</span><br><span class="line">    return &quot;*&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  @Override</span><br><span class="line">  public ClientHttpResponse fallbackResponse(Throwable cause) &#123;</span><br><span class="line">    if (cause instanceof HystrixTimeoutException) &#123;</span><br><span class="line">      return response(HttpStatus.GATEWAY_TIMEOUT);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return this.fallbackResponse();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  @Override</span><br><span class="line">  public ClientHttpResponse fallbackResponse() &#123;</span><br><span class="line">    return this.response(HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">  &#125;</span><br><span class="line">  private ClientHttpResponse response(final HttpStatus status) &#123;</span><br><span class="line">    return new ClientHttpResponse() &#123;</span><br><span class="line">      @Override</span><br><span class="line">      public HttpStatus getStatusCode() throws IOException &#123;</span><br><span class="line">        return status;</span><br><span class="line">      &#125;</span><br><span class="line">      @Override</span><br><span class="line">      public int getRawStatusCode() throws IOException &#123;</span><br><span class="line">        return status.value();</span><br><span class="line">      &#125;</span><br><span class="line">      @Override</span><br><span class="line">      public String getStatusText() throws IOException &#123;</span><br><span class="line">        return status.getReasonPhrase();</span><br><span class="line">      &#125;</span><br><span class="line">      @Override</span><br><span class="line">      public void close() &#123;</span><br><span class="line">      &#125;</span><br><span class="line">      @Override</span><br><span class="line">      public InputStream getBody() throws IOException &#123;</span><br><span class="line">        return new ByteArrayInputStream(&quot;服务不可用，请稍后再试。&quot;.getBytes());</span><br><span class="line">      &#125;</span><br><span class="line">      @Override</span><br><span class="line">      public HttpHeaders getHeaders() &#123;</span><br><span class="line">        // headers设定</span><br><span class="line">        HttpHeaders headers = new HttpHeaders();</span><br><span class="line">        MediaType mt = new MediaType(&quot;application&quot;, &quot;json&quot;, Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">        headers.setContentType(mt);</span><br><span class="line">        return headers;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="完整的Github代码地址"><a href="#完整的Github代码地址" class="headerlink" title="完整的Github代码地址"></a>完整的<a href="https://github.com/rstyro/SpringCloud/tree/master/SpringCloud-zuul-fallback" target="_blank" rel="noopener">Github代码地址</a></h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Zuul-的回退&quot;&gt;&lt;a href=&quot;#一、Zuul-的回退&quot; class=&quot;headerlink&quot; title=&quot;一、Zuul 的回退&quot;&gt;&lt;/a&gt;一、Zuul 的回退&lt;/h2&gt;&lt;p&gt;Zuul 本身就有断路器的功能&lt;br&gt;很简单只需自定义一个&lt;code&gt;Zuu
      
    
    </summary>
    
      <category term="Java" scheme="https://rstyro.github.io/blog/categories/Java/"/>
    
    
      <category term="SpringCloud" scheme="https://rstyro.github.io/blog/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud （八）、Zuul 服务网关</title>
    <link href="https://rstyro.github.io/blog/2018/05/26/SpringCloud%20%EF%BC%88%E5%85%AB%EF%BC%89%E3%80%81Zuul%20%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
    <id>https://rstyro.github.io/blog/2018/05/26/SpringCloud （八）、Zuul 服务网关/</id>
    <published>2018-05-26T15:20:00.000Z</published>
    <updated>2019-01-12T14:49:03.186Z</updated>
    
    <content type="html"><![CDATA[<p><strong>举个栗子，在一个大型的购物网站中，以微服务架构进行拆分，会分为很多种服务，比如购物车、订单服务、评论服务、库存服务、用户服务等等，服务相互之间调用，那么就会产生很多个链接地址，如果有成百上千个服务之间进行调用，那么维护起来是很麻烦的，所以根据环境需要就产生了服务网关。<br>什么是服务网关，简单的说它就是一个中转站或者叫转发器，我们每次请求只需要去网关即可，而不需要去具体的服务请求，为了方便理解，看下面两张图</strong><br><img src="/blog/2018/05/26/SpringCloud （八）、Zuul 服务网关/upload/images/14068.png" alt=""><br>下面是加了网关API之后<br><img src="/blog/2018/05/26/SpringCloud （八）、Zuul 服务网关/upload/images/32768.png" alt=""></p><p><strong>API 网关负责服务请求路由、组合及协议转换。客户端的所有请求都首先经过 API 网关，然后由它将请求路由到合适的微服务。API 网关经常会通过调用多个微服务并合并结果来处理一个请求。它可以在 web 协议（如 HTTP 与 WebSocket）与内部使用的非 web 友好协议之间转换。</strong></p><p><strong>API 网关还能为每个客户端提供一个定制的 API。通常，它会向移动客户端暴露一个粗粒度的 API。以产品详情的场景为例，API 网关可以提供一个端点（/productdetails?productid=xxx），使移动客户端可以通过一个请求获取所有的产品详情。API 网关通过调用各个服务（产品信息、推荐、评论等等）并合并结果来处理请求。</strong></p><p><strong>Netflix API 网关是一个很好的 API 网关实例。Netflix 流媒体服务提供给成百上千种类型的设备使用，包括电视、机顶盒、智能手机、游戏系统、平板电脑等等。</strong></p><p><strong>最初，Netflix 试图为他们的流媒体服务提供一个通用的 API。然而他们发现，由于各种各样的设备都有自己独特的需求，这种方式并不能很好地工作。如今，他们使用一个 API 网关，通过运行与针对特定设备的适配器代码，来为每种设备提供定制的 API。通常，一个适配器通过调用平均 6 到 7 个后端服务来处理每个请求。Netflix API 网关每天处理数十亿请求。</strong></p><h4 id="API-网关的优点和缺点"><a href="#API-网关的优点和缺点" class="headerlink" title="API 网关的优点和缺点"></a>API 网关的优点和缺点</h4><p>如你所料，使用 API 网关有优点也有不足。使用 API <code>网关的最大优点</code>是，它封装了应用程序的内部结构。客户端只需要同网关交互，而不必调用特定的服务。API 网关为每一类客户端提供了特定的 API，这减少了客户端与应用程序间的交互次数，还简化了客户端代码。</p><p><strong> <code>API 网关也有一些不足。</code>它增加了一个我们必须开发、部署和维护的高可用组件。还有一个风险是，API 网关变成了开发瓶颈。为了暴露每个微服务的端点，开发人员必须更新 API 网关。API网关的更新过程要尽可能地简单，这很重要；否则，为了更新网关，开发人员将不得不排队等待。不过，虽然有这些不足，但对于大多数现实世界的应用程序而言，使用 API 网关是合理的。</strong></p><p><strong>说了那么多来看代码实现吧</strong></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>老思路…</strong></p><h3 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-zuul&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="二、添加注解"><a href="#二、添加注解" class="headerlink" title="二、添加注解"></a>二、添加注解</h3><p>在启动类添加<code>@EnableZuulProxy</code>注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableZuulProxy</span><br><span class="line">public class SpringcloudZuulApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringcloudZuulApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="三、配置文件application-yml"><a href="#三、配置文件application-yml" class="headerlink" title="三、配置文件application.yml"></a>三、配置文件application.yml</h3><p>下面配置文件中，有12个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8980</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://rstyro:rstyropwd@localhost:8761/eureka</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: springcloud-gateway-zuul   </span><br><span class="line">  profiles:</span><br><span class="line">    active: zuul_demo1</span><br><span class="line"># 例子1，zuul 默认是对所有 eureka 服务 进行反向代理</span><br><span class="line">---  </span><br><span class="line">spring:</span><br><span class="line">  profiles: zuul_demo1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 例子2，配置服务别名</span><br><span class="line">---  </span><br><span class="line">spring:</span><br><span class="line">  profiles: zuul_demo2</span><br><span class="line"># routes 下的就是配置别名，：格式： 服务名称(service ID): /别名/**,不配的话用默认的服务名称</span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    producer: /pro/**</span><br><span class="line">    customer-ribbon: /customer/**</span><br><span class="line">    </span><br><span class="line"># 例子3，`ignoredServices: * `--不反向代理，*代表所有服务，只反向代理 routes 下面配置的服务，如下例子是只代理 customer-ribbon 服务</span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: zuul_demo3</span><br><span class="line">zuul:</span><br><span class="line">  ignoredServices: &apos;*&apos;</span><br><span class="line">  routes:</span><br><span class="line">    customer-ribbon: /customer/**</span><br><span class="line"> </span><br><span class="line"># 例子4: ignoredServices:不反向代理指定的服务(多个用逗号隔开)，但是如果routes 下面配置了，可以请求配置后的服务别名</span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: zuul_demo4</span><br><span class="line">zuul:</span><br><span class="line">  ignoredServices: producer,customer-ribbon</span><br><span class="line">  routes:</span><br><span class="line">    customer-ribbon: /customer/**</span><br><span class="line"></span><br><span class="line"># 例子5,更细粒度的配置，serviceTestName 是随便取的</span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: zuul_demo5</span><br><span class="line">zuul:</span><br><span class="line">  routes:   </span><br><span class="line">    serviceTestName:</span><br><span class="line">        path: /pro-serviceid/**</span><br><span class="line">        serviceId: producer</span><br><span class="line">        </span><br><span class="line"># 例子6,可以把serviceId 换成url</span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: zuul_demo6</span><br><span class="line">zuul:</span><br><span class="line">  routes:   </span><br><span class="line">    serviceTestName:</span><br><span class="line">        path: /pro-url/**</span><br><span class="line">        url: http://192.168.1.101:7900/</span><br><span class="line">    </span><br><span class="line"># 例子7,配置负载均衡</span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: zuul_demo7</span><br><span class="line">zuul:</span><br><span class="line">  routes:   </span><br><span class="line">    serviceTestName:</span><br><span class="line">        path: /pro/**</span><br><span class="line">        serviceId: producer</span><br><span class="line">ribbon:</span><br><span class="line">  eureka:</span><br><span class="line">    enabled: false</span><br><span class="line"></span><br><span class="line">producer:</span><br><span class="line">  ribbon:</span><br><span class="line">    listOfServers: http://192.168.1.101:7900/,http://192.168.1.101:7901</span><br><span class="line"></span><br><span class="line"># 例子8,访问的时候加前缀 /api, 比如：http://localhost:8980/api/producer/item/1</span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: zuul_demo8</span><br><span class="line">zuul:</span><br><span class="line">  prefix: /api</span><br><span class="line"></span><br><span class="line"># 例子9.如下配置，如果要访问 http://localhost:7900/item/1 的服务，，应为: http://localhost:8980/item/producer/1</span><br><span class="line"># 全局配置</span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: zuul_demo9</span><br><span class="line">zuul:</span><br><span class="line">  prefix: /item</span><br><span class="line">  stripPrefix: false</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    com.netflix: debug</span><br><span class="line"> </span><br><span class="line"># 例子10</span><br><span class="line"># 局部配置   </span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: zuul_demo10</span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    producer:</span><br><span class="line">      path: /item/**</span><br><span class="line">      stripPrefix: false</span><br><span class="line">#  prefix: /item</span><br><span class="line">#  stripPrefix: false</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    com.netflix: debug</span><br><span class="line"></span><br><span class="line"># 例子11    </span><br><span class="line"># Strangulation Patterns and Local Forwards,绞杀者模式与本地转发</span><br><span class="line"># forward: 后面接的是本地的转发地址</span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: zuul_demo11</span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    producer:</span><br><span class="line">      path: /item/**</span><br><span class="line">      url: forward:/item</span><br><span class="line">    customer:</span><br><span class="line">      path: /provider/**</span><br><span class="line">      url: http://localhost:7900/item</span><br><span class="line">    legacy:</span><br><span class="line">      path: /**</span><br><span class="line">      url: http://localhost:7900</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    com.netflix: debug</span><br><span class="line"></span><br><span class="line"># 例子12</span><br><span class="line"># 上传，下面是配置超时时间，通过zuul 代理请求时在服务地址前缀加/zuul ,即可跳过spring 限制上传的大小。比如下面的地址</span><br><span class="line">#  http://192.168.1.101:8980/zuul/file-upload/upload</span><br><span class="line"># 正常是这样子的:http://192.168.1.101:8980/file-upload/upload</span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: zuul_demo12</span><br><span class="line">  </span><br><span class="line">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 600000</span><br><span class="line">ribbon:</span><br><span class="line">  ConnectTimeout: 5000</span><br><span class="line">  ReadTimeout: 600000</span><br></pre></td></tr></table></figure><p>完整的<a href="https://github.com/rstyro/SpringCloud/tree/master/SpringCloud-zuul" target="_blank" rel="noopener">Github代码地址</a></p><p> 访问<code>producer</code>服务的接口<code>/producer/vipAddress</code> 请求地址为 <code>http://192.168.1.101:8980/producer/vipAddress</code>，也可以这样<code>http://192.168.1.101:8980/zuul/producer/vipAddress</code></p><p> 前缀加上<code>/zuul</code> 这个可以绕过Spring 的DispatcherServlet，比如上传文件时，绕过文件上传的大小限制。看文档<br> <img src="/blog/2018/05/26/SpringCloud （八）、Zuul 服务网关/upload/images/97810.png" alt=""><br> 我们可以测试下<br> 上传的代码如下：<br> 上传成功后返回成功后的文件路径</p><h4 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h4><h5 id="1、代码片段"><a href="#1、代码片段" class="headerlink" title="1、代码片段"></a>1、代码片段</h5> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> @RestController</span><br><span class="line">public class UploadController &#123;</span><br><span class="line"></span><br><span class="line">@PostMapping(&quot;/upload&quot;)</span><br><span class="line">public Object uploadFile(@RequestParam(value=&quot;file&quot;,required=true)MultipartFile file) throws IOException &#123;</span><br><span class="line">if (file.isEmpty()) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">String filePath  = &quot;E:\\&quot;+System.currentTimeMillis()+&quot;_&quot;+file.getOriginalFilename();</span><br><span class="line">file.transferTo(new File(filePath));</span><br><span class="line">return filePath;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8600</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://rstyro:rstyropwd@localhost:8761/eureka</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: file-upload</span><br><span class="line">  http:</span><br><span class="line">    multipart:</span><br><span class="line">      max-file-size: 2000MB     #默认1M</span><br><span class="line">      max-request-size: 2000MB  #默认10m</span><br></pre></td></tr></table></figure><h5 id="完整的上传-Github代码地址"><a href="#完整的上传-Github代码地址" class="headerlink" title="完整的上传 Github代码地址"></a>完整的上传 <a href="https://github.com/rstyro/SpringCloud/tree/master/SpringCloud-file-upload" target="_blank" rel="noopener">Github代码地址</a></h5><h5 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h5><p>Eureka 服务注册情况，下面的<code>红字</code>，代表eureka进入了 <code>自我保护模式</code><br><img src="/blog/2018/05/26/SpringCloud （八）、Zuul 服务网关/upload/images/83215.png" alt=""><br><strong>准备工作</strong><br>需要<code>curl</code> 工具，window 可在<a href="https://curl.haxx.se/download.html" target="_blank" rel="noopener">https://curl.haxx.se/download.html</a>进行下载<br>启动zuul ,使用如上的项目，配置选择 <code>zuul_demo12</code> 的 profiles</p><p>通过zuul 访问 上传路径为：<a href="http://localhost:8980/file-upload/upload" target="_blank" rel="noopener">http://localhost:8980/file-upload/upload</a><br>先上传一个小文件<code>doc.sql</code> 发现是可以成功的，<br>但是上传一个大文件<code>a11.wnv</code> 报了<code>because its size (551282098) exceeds the configured maximum (10485760)</code> 的错误，<br>意思是超过文件上传的大小限制 <code>10485760 b</code> ，<br>后面我们在上传的地址前加了 <code>/zuul</code> 发现上传成功了。测试过程如下图：<br><img src="/blog/2018/05/26/SpringCloud （八）、Zuul 服务网关/26879.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;举个栗子，在一个大型的购物网站中，以微服务架构进行拆分，会分为很多种服务，比如购物车、订单服务、评论服务、库存服务、用户服务等等，服务相互之间调用，那么就会产生很多个链接地址，如果有成百上千个服务之间进行调用，那么维护起来是很麻烦的，所以根据环境需要就产生了
      
    
    </summary>
    
      <category term="Java" scheme="https://rstyro.github.io/blog/categories/Java/"/>
    
    
      <category term="SpringCloud" scheme="https://rstyro.github.io/blog/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud （七）、禁用Feign对Hystrix支持与Hystrix 监控</title>
    <link href="https://rstyro.github.io/blog/2018/05/26/SpringCloud%20%EF%BC%88%E4%B8%83%EF%BC%89%E3%80%81%E7%A6%81%E7%94%A8Feign%E5%AF%B9Hystrix%E6%94%AF%E6%8C%81%E4%B8%8EHystrix%20%E7%9B%91%E6%8E%A7/"/>
    <id>https://rstyro.github.io/blog/2018/05/26/SpringCloud （七）、禁用Feign对Hystrix支持与Hystrix 监控/</id>
    <published>2018-05-26T09:08:09.000Z</published>
    <updated>2019-01-12T14:49:03.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="禁用单个Feign对Hystrix支持与Hystrix-监控"><a href="#禁用单个Feign对Hystrix支持与Hystrix-监控" class="headerlink" title="禁用单个Feign对Hystrix支持与Hystrix 监控"></a>禁用单个Feign对Hystrix支持与Hystrix 监控</h1><h2 id="一、配置禁用Feign对Hystrix-的支持"><a href="#一、配置禁用Feign对Hystrix-的支持" class="headerlink" title="一、配置禁用Feign对Hystrix 的支持"></a>一、配置禁用Feign对Hystrix 的支持</h2><p><strong>如果现在有两个Feign服务接口，FeignClientService1、FeignClientService2。我们现在想禁用FeignClientService2 的Hystrix支持，而FeignClientService1不变还是启用</strong></p><h3 id="1、配置FeignClent"><a href="#1、配置FeignClent" class="headerlink" title="1、配置FeignClent"></a>1、配置FeignClent</h3><p><strong>这个和启动Hystrix 的配置差不多，主要看的是configuration 后面这个类的内容</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(name=&quot;test&quot;,url=&quot;http://localhost:7901/&quot;,configuration=FeignConfig2.class,fallback=MyHystrixFallback2.class)</span><br><span class="line">public interface FeignClientService2 &#123;</span><br><span class="line"></span><br><span class="line">@RequestMapping(value=&quot;/&#123;serviceName&#125;&quot;,method=RequestMethod.GET)</span><br><span class="line">public Object serverInfo(@PathVariable(&quot;serviceName&quot;) String serviceName);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 2、自定义配置类FeignConfig2</span><br><span class="line">**因为feign的默认builder 是`HystrixFeign.Builder` 如下图** </span><br><span class="line">![](/SpringCloud （七）、禁用Feign对Hystrix支持与Hystrix 监控/36174.png)</span><br><span class="line"></span><br><span class="line">**所以主要是重写 feignBuilder 这个方法，返回一个另一个builder即可，可查看官方文档的示例**</span><br><span class="line">![](/SpringCloud （七）、禁用Feign对Hystrix支持与Hystrix 监控/43178.png)</span><br></pre></td></tr></table></figure></p><p>@Configuration<br>public class FeignConfig2 {</p><pre><code>@Bean@Scope(&quot;prototype&quot;)public Feign.Builder feignBuilder() {    return Feign.builder();}</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> #### 重要的配置就是第二步，这样即可禁用Hystrix 的支持。</span><br><span class="line">** 可以访问`/hystrix.stream` 链接，查看hystrix的动向数据**</span><br><span class="line"></span><br><span class="line">![](/SpringCloud （七）、禁用Feign对Hystrix支持与Hystrix 监控/51493.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ##### 完整的[Github代码示例](https://github.com/rstyro/SpringCloud/tree/master/SpringCloud-customer-feign-hystrix-disable-single)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> ## 二、Hystrix监控面板Dashboard</span><br><span class="line"> **创建一个Dashboard项目很简单**</span><br><span class="line"> </span><br><span class="line"> ### 1、添加依赖</span><br></pre></td></tr></table></figure></p><p> <dependency><br>    <groupid>org.springframework.cloud</groupid><br>    <artifactid>spring-cloud-starter-hystrix-dashboard</artifactid><br></dependency><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">### 2、添加注解</span><br><span class="line"> **在启动类添加`@EnableHystrixDashboard`注解**</span><br></pre></td></tr></table></figure></p><p>@EnableHystrixDashboard<br>@SpringBootApplication<br>public class HystrixDashboardApplication {<br>    public static void main( String[] args ){<br>      SpringApplication.run(HystrixDashboardApplication.class, args);<br>    }</p><p>}<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">### 3、配置配置文件application.yml</span><br><span class="line"> **下面是修改服务启动的端口，默认是8080，不改也是可以的，按需**</span><br></pre></td></tr></table></figure></p><p> server:<br>  port: 8930</p><p> <code>`</code></p><h3 id="4、访问"><a href="#4、访问" class="headerlink" title="4、访问"></a>4、访问</h3><p><strong> 启动之后，访问<a href="http://192.168.1.101:8930/hystrix" target="_blank" rel="noopener">http://192.168.1.101:8930/hystrix</a>即可，</strong></p><p> <strong>在访问页面写上，<code>hystrix.stream</code> 的地址即可,比如：<a href="http://192.168.1.101:8904/hystrix.stream" target="_blank" rel="noopener">http://192.168.1.101:8904/hystrix.stream</a>，标题随便写一个即可</strong></p><p><img src="/blog/2018/05/26/SpringCloud （七）、禁用Feign对Hystrix支持与Hystrix 监控/59074.png" alt=""></p><h5 id="完整的Github代码示例"><a href="#完整的Github代码示例" class="headerlink" title="完整的Github代码示例"></a>完整的<a href="https://github.com/rstyro/SpringCloud/tree/master/SpringCloud-customer-ribbon-hystrix-dashboard" target="_blank" rel="noopener">Github代码示例</a></h5><p><strong> 如果监控集群的，可以配置turbine，也不是很难，可参考官方文档<a href="http://cloud.spring.io/spring-cloud-static/Dalston.SR5/single/spring-cloud.html#_turbine" target="_blank" rel="noopener">http://cloud.spring.io/spring-cloud-static/Dalston.SR5/single/spring-cloud.html#_turbine</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;禁用单个Feign对Hystrix支持与Hystrix-监控&quot;&gt;&lt;a href=&quot;#禁用单个Feign对Hystrix支持与Hystrix-监控&quot; class=&quot;headerlink&quot; title=&quot;禁用单个Feign对Hystrix支持与Hystrix 监控&quot;&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://rstyro.github.io/blog/categories/Java/"/>
    
    
      <category term="SpringCloud" scheme="https://rstyro.github.io/blog/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud （六）、断路器模式</title>
    <link href="https://rstyro.github.io/blog/2018/05/26/SpringCloud%20%EF%BC%88%E5%85%AD%EF%BC%89%E3%80%81%E6%96%AD%E8%B7%AF%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://rstyro.github.io/blog/2018/05/26/SpringCloud （六）、断路器模式/</id>
    <published>2018-05-26T04:50:04.000Z</published>
    <updated>2019-01-12T14:49:03.190Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在微服务架构中，我们将系统拆分成了一个个的服务单元，各单元间通过服务注册与订阅的方式互相依赖。由于每个单元都在不同的进程中运行，依赖通过远程调用的方式执行，这样就有可能因为网络原因或是依赖服务自身问题出现调用故障或延迟，而这些问题会直接导致调用方的对外服务也出现延迟，若此时调用方的请求不断增加，最后就会出现因等待出现故障的依赖方响应而形成任务积压，最终导致自身服务的瘫痪。这就是传说中的<code>雪崩效应</code> 或者叫 <code>级联失败</code>。</strong></p><p><img src="/blog/2018/05/26/SpringCloud （六）、断路器模式/98152.png" alt=""></p><h4 id="为了解决这种服务之间的级联失败，所以产生了一种模式叫做断路器模式"><a href="#为了解决这种服务之间的级联失败，所以产生了一种模式叫做断路器模式" class="headerlink" title="为了解决这种服务之间的级联失败，所以产生了一种模式叫做断路器模式"></a>为了解决这种服务之间的级联失败，所以产生了一种模式叫做<code>断路器模式</code></h4><h3 id="什么是断路器"><a href="#什么是断路器" class="headerlink" title="什么是断路器"></a>什么是断路器</h3><p><strong>断路器模式源于Martin Fowler的Circuit Breaker一文。“断路器”本身是一种开关装置，用于在电路上保护线路过载，当线路中有电器发生短路时，“断路器”能够及时的切断故障电路，防止发生过载、发热、甚至起火等严重后果。<br>在分布式架构中，断路器模式的作用也是类似的，当某个服务单元发生故障（类似用电器发生短路）之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个错误响应，而不是长时间的等待。这样就不会使得线程因调用故障服务被长时间占用不释放，避免了故障在分布式系统中的蔓延。</strong></p><h3 id="Netflix-Hystrix"><a href="#Netflix-Hystrix" class="headerlink" title="Netflix Hystrix"></a>Netflix Hystrix</h3><p><strong>在Spring Cloud中使用了Hystrix 来实现断路器的功能。<a href="https://github.com/Netflix/hystrix" target="_blank" rel="noopener">Hystrix</a>是Netflix开源的微服务框架套件之一，该框架目标在于通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以及监控和配置等功能。</strong></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>上节刚讲ribbon ,所以我们直接在ribbon 的代码基础之上添加hystrix。</p><h3 id="一、简单的hystrix配置"><a href="#一、简单的hystrix配置" class="headerlink" title="一、简单的hystrix配置"></a>一、简单的hystrix配置</h3><h4 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2、添加注解"><a href="#2、添加注解" class="headerlink" title="2、添加注解"></a>2、添加注解</h4><p>在启动类添加<code>@EnableCircuitBreaker</code> 注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableCircuitBreaker</span><br><span class="line">public class CustomerRibbonHystrixApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main( String[] args )&#123;</span><br><span class="line">      SpringApplication.run(CustomerRibbonHystrixApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Bean</span><br><span class="line">    @LoadBalanced</span><br><span class="line">    public RestTemplate restTemlate() &#123;</span><br><span class="line">    return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、设置请求回调"><a href="#3、设置请求回调" class="headerlink" title="3、设置请求回调"></a>3、设置请求回调</h4><h5 id="3-1-在方法上添加-HystrixCommand-注解"><a href="#3-1-在方法上添加-HystrixCommand-注解" class="headerlink" title="3.1 在方法上添加@HystrixCommand 注解"></a>3.1 在方法上添加<code>@HystrixCommand</code> 注解</h5><h5 id="3-2-在-HystrixCommand-注解中定义回调方法名称，并实现其方法"><a href="#3-2-在-HystrixCommand-注解中定义回调方法名称，并实现其方法" class="headerlink" title="3.2 在@HystrixCommand 注解中定义回调方法名称，并实现其方法"></a>3.2 在<code>@HystrixCommand</code> 注解中定义回调方法名称，并实现其方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/provider/&#123;id&#125;&quot;)</span><br><span class="line">@HystrixCommand(fallbackMethod=&quot;testFallback&quot;)</span><br><span class="line">public Object test(@PathVariable(&quot;id&quot;) String id) &#123;</span><br><span class="line">ServiceInstance serverInstance = loadBalancerClient.choose(&quot;producer&quot;);</span><br><span class="line">System.out.println(&quot;====&quot;+serverInstance.getHost()+&quot;:&quot;+serverInstance.getPort());</span><br><span class="line">return restTemplate.getForObject(&quot;http://producer/item/&quot;+id,Object.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 请求失败时，调用此返回的方法</span><br><span class="line"> * @param id</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public Object testFallback(String id) &#123;</span><br><span class="line">System.out.println(&quot;这个方法里面可以写回调的逻辑，下面是回调的内容，参数和如上的方法参数一致&quot;);</span><br><span class="line">return &quot;请求失败时，返回的数据&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这样既可实现断路器功能，可以测试下。<br>1、启动Eureka服务<br>2、启动生产者服务<br>2、启动这个hystrix 项目<br>访问请求 <code>/provider/{id}</code> ,返回结果应该是正常的，然后把生产者服务停掉，再次请求看是否返回我们设置的回调内容。</strong><br><img src="/blog/2018/05/26/SpringCloud （六）、断路器模式/08632.png" alt=""></p><p><img src="/blog/2018/05/26/SpringCloud （六）、断路器模式/21489.png" alt=""></p><h5 id="Github代码示例"><a href="#Github代码示例" class="headerlink" title="Github代码示例"></a><a href="https://github.com/rstyro/SpringCloud/tree/master/SpringCloud-customer-ribbon-hystrix" target="_blank" rel="noopener">Github代码示例</a></h5><h3 id="二、hystrix-对feign-的支持"><a href="#二、hystrix-对feign-的支持" class="headerlink" title="二、hystrix 对feign 的支持"></a>二、hystrix 对feign 的支持</h3><h4 id="1、添加依赖-1"><a href="#1、添加依赖-1" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h4><p>依赖和上面的示例一 一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h4 id="2、添加注解-1"><a href="#2、添加注解-1" class="headerlink" title="2、添加注解"></a>2、添加注解</h4><p>在启动类上添加<code>@EnableCircuitBreaker</code> 注解因为是feign 所以也是需要<code>@EnableFeignClients</code> 注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@EnableCircuitBreaker</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class CustomerFeignHystrixApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main( String[] args )&#123;</span><br><span class="line">      SpringApplication.run(CustomerFeignHystrixApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、在feign接口客户端上添加注解"><a href="#3、在feign接口客户端上添加注解" class="headerlink" title="3、在feign接口客户端上添加注解"></a>3、在feign接口客户端上添加注解</h4><h5 id="方法一：使用fallback"><a href="#方法一：使用fallback" class="headerlink" title="方法一：使用fallback"></a>方法一：使用fallback</h5><p><strong> 1、在feign服务接口的<code>@FeignClient</code> 注解添加fallback 参数，后面是一个配置类名</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(name=&quot;producer&quot;,fallback=MyHystrixFallback.class)</span><br><span class="line">public interface MyFeignClient &#123;</span><br><span class="line"></span><br><span class="line">@RequestMapping(value=&quot;/item/&#123;id&#125;&quot;,method=RequestMethod.GET)</span><br><span class="line">public Object detai(@PathVariable(&quot;id&quot;) String id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>2、实现fallback 配置的自定义类</strong><br>实现feign 服务接口，重写其所有方法的回调<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MyHystrixFallback implements MyFeignClient&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Object detai(String id) &#123;</span><br><span class="line">return &quot;自定义Hystrix 返回数据：id=&quot;+id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="方法二：使用fallbackFactory"><a href="#方法二：使用fallbackFactory" class="headerlink" title="方法二：使用fallbackFactory"></a>方法二：使用fallbackFactory</h5><p><strong> 1、在feign服务接口的<code>@FeignClient</code> 注解添加fallbackFactory 参数，后面是一个配置类名</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(name=&quot;producer&quot;,fallbackFactory=MyHystrixFallbackFactory.class)</span><br><span class="line">public interface MyFeignClient2 &#123;</span><br><span class="line"></span><br><span class="line">@RequestMapping(value=&quot;/item/&#123;id&#125;&quot;,method=RequestMethod.GET)</span><br><span class="line">public Object search(@PathVariable(&quot;id&quot;) String id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>2、实现fallbackFactory 定义的类</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MyHystrixFallbackFactory implements FallbackFactory&lt;MyFeignClient2&gt; &#123;</span><br><span class="line">private static final Logger log = LoggerFactory.getLogger(MyHystrixFallbackFactory.class);</span><br><span class="line">@Override</span><br><span class="line">public MyFeignClient2 create(Throwable e) &#123;</span><br><span class="line">log.info(&quot;throwable = &quot;+e);</span><br><span class="line">return new MyHystrixFeignClient2Fallback();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个MyHystrixFeignClient2Fallback 类是其实现类，fallbackFactory 可以说时fallback 的增加版<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class MyHystrixFeignClient2Fallback implements MyFeignClient2&#123;</span><br><span class="line">@Override</span><br><span class="line">public Object search(String id) &#123;</span><br><span class="line">return &quot;search 方法请求失败，id=&quot;+id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>验证过程与结果同示例一一致</strong></p><h5 id="Github代码示例-1"><a href="#Github代码示例-1" class="headerlink" title="Github代码示例"></a><a href="https://github.com/rstyro/SpringCloud/tree/master/SpringCloud-customer-feign-hystrix" target="_blank" rel="noopener">Github代码示例</a></h5><p>部分参考自：<a href="http://blog.didispace.com/springcloud3/" target="_blank" rel="noopener">http://blog.didispace.com/springcloud3/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;在微服务架构中，我们将系统拆分成了一个个的服务单元，各单元间通过服务注册与订阅的方式互相依赖。由于每个单元都在不同的进程中运行，依赖通过远程调用的方式执行，这样就有可能因为网络原因或是依赖服务自身问题出现调用故障或延迟，而这些问题会直接导致调用方的对外服务也
      
    
    </summary>
    
      <category term="Java" scheme="https://rstyro.github.io/blog/categories/Java/"/>
    
    
      <category term="SpringCloud" scheme="https://rstyro.github.io/blog/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud （五）、常见问题总结</title>
    <link href="https://rstyro.github.io/blog/2018/05/25/SpringCloud%20%EF%BC%88%E4%BA%94%EF%BC%89%E3%80%81%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://rstyro.github.io/blog/2018/05/25/SpringCloud （五）、常见问题总结/</id>
    <published>2018-05-25T08:09:33.000Z</published>
    <updated>2019-01-12T14:49:03.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud-常见问题总结"><a href="#SpringCloud-常见问题总结" class="headerlink" title="SpringCloud 常见问题总结"></a>SpringCloud 常见问题总结</h1><h3 id="1-Eureka-Environment的配置："><a href="#1-Eureka-Environment的配置：" class="headerlink" title="1.Eureka Environment的配置："></a>1.Eureka Environment的配置：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.environment: 字符串</span><br></pre></td></tr></table></figure><p>参考文档：<br><a href="https://github.com/Netflix/eureka/wiki/Configuring-Eureka" target="_blank" rel="noopener">https://github.com/Netflix/eureka/wiki/Configuring-Eureka</a></p><h3 id="2-Eureka-DataCenter的配置"><a href="#2-Eureka-DataCenter的配置" class="headerlink" title="2.Eureka DataCenter的配置"></a>2.Eureka DataCenter的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.datacenter: cloud</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Netflix/eureka/wiki/Configuring-Eureka" target="_blank" rel="noopener">https://github.com/Netflix/eureka/wiki/Configuring-Eureka</a><br>这边说：配置-Deureka.datacenter=cloud，这样eureka将会知道是在AWS云上</p><h3 id="3-Eureka开启自我保护的提示"><a href="#3-Eureka开启自我保护的提示" class="headerlink" title="3.Eureka开启自我保护的提示"></a>3.Eureka开启自我保护的提示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&apos;RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</span><br></pre></td></tr></table></figure><p>保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）。</p><p><a href="https://github.com/Netflix/eureka/wiki/Understanding-Eureka-Peer-to-Peer-Communication" target="_blank" rel="noopener">详见点我</a></p><h3 id="4-Eureka注册服务慢的问题如何解决？"><a href="#4-Eureka注册服务慢的问题如何解决？" class="headerlink" title="4.Eureka注册服务慢的问题如何解决？"></a>4.Eureka注册服务慢的问题如何解决？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.instance.leaseRenewalIntervalInSeconds</span><br></pre></td></tr></table></figure><p><a href="http://cloud.spring.io/spring-cloud-static/Camden.SR1/#_why_is_it_so_slow_to_register_a_service" target="_blank" rel="noopener">参考文档</a><br><strong> 原文：</strong></p><blockquote><p>Why is it so Slow to Register a Service?<br>Being an instance also involves a periodic heartbeat to the registry (via the client’s serviceUrl) with default duration 30 seconds. A service is not available for discovery by clients until the instance, the server and the client all have the same metadata in their local cache (so it could take 3 heartbeats). You can change the period using eureka.instance.leaseRenewalIntervalInSeconds and this will speed up the process of getting clients connected to other services. In production it’s probably better to stick with the default because there are some computations internally in the server that make assumptions about the lease renewal period.</p></blockquote><p><strong>翻译：</strong></p><blockquote><p>作为实例还涉及到与注册中心的周期性心跳，默认持续时间为30秒（通过serviceUrl）。在实例、服务器、客户端都在本地缓存中具有相同的元数据之前，服务不可用于客户端发现（所以可能需要3次心跳）。你可以使用eureka.instance.leaseRenewalIntervalInSeconds 配置，这将加快客户端连接到其他服务的过程。在生产中，最好坚持使用默认值，因为在服务器内部有一些计算，他们对续约做出假设。</p></blockquote><h3 id="5-如何解决Eureka-Server不踢出已关停的节点的问题？"><a href="#5-如何解决Eureka-Server不踢出已关停的节点的问题？" class="headerlink" title="5.如何解决Eureka Server不踢出已关停的节点的问题？"></a>5.如何解决Eureka Server不踢出已关停的节点的问题？</h3><p><strong>server端:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eureka.server.enable-self-preservation（设为false，关闭自我保护主要）</span><br><span class="line">eureka.server.eviction-interval-timer-in-ms     清理间隔（单位毫秒，默认是60*1000）</span><br></pre></td></tr></table></figure></p><p><strong>client端：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka.client.healthcheck.enabled = true开启健康检查（需要spring-boot-starter-actuator依赖）</span><br><span class="line">eureka.instance.lease-renewal-interval-in-seconds =10租期更新时间间隔（默认30秒）</span><br><span class="line">eureka.instance.lease-expiration-duration-in-seconds =30  租期到期时间（默认90秒）</span><br></pre></td></tr></table></figure></p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>服务器端配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">    server:</span><br><span class="line">        enableSelfPreservation: false</span><br><span class="line">        evictionIntervalTimerInMs: 4000</span><br></pre></td></tr></table></figure></p><p>客户端配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">    instance:</span><br><span class="line">        leaseRenewalIntervalInSeconds: 10</span><br><span class="line">        leaseExpirationDurationInSeconds: 30</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong><br>更改Eureka更新频率将打破服务器的自我保护功能，生产环境下不建议自定义这些配置。<br><a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/373" target="_blank" rel="noopener">详见</a></p><h3 id="6-Eureka配置instanceId显示IP"><a href="#6-Eureka配置instanceId显示IP" class="headerlink" title="6.Eureka配置instanceId显示IP"></a>6.Eureka配置instanceId显示IP</h3><p>在Spring Cloud中，服务的Instance ID的默认值是${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${server.port}} ，也就是机器主机ip:应用名称:应用端口 。因此在Eureka  ,如果想要自定义这部分的信息怎么办？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    preferIpAddress: true</span><br><span class="line">    instance-id: $&#123;spring.cloud.client.ipAddress&#125;:$&#123;server.port&#125;</span><br></pre></td></tr></table></figure></p><h3 id="7-Eureka配置最佳实践总结"><a href="#7-Eureka配置最佳实践总结" class="headerlink" title="7.Eureka配置最佳实践总结"></a>7.Eureka配置最佳实践总结</h3><p><a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/203" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-netflix/issues/203</a></p><p><strong>注意点：<br><code>eureka.client.healthcheck.enabled=true</code>配置项必须设置在<code>application.yml</code>中<br><code>eureka.client.healthcheck.enabled=true</code> 只应该在<code>application.yml</code>中设置。如果设置在<code>bootstrap.yml</code>中将会导致一些不良的<code>副作用</code>，例如在Eureka中注册的应用名称是<code>UNKNOWN</code>等。</strong></p><h3 id="8-Ribbon"><a href="#8-Ribbon" class="headerlink" title="8.Ribbon"></a>8.Ribbon</h3><p><strong> 1.自定义配置时，<code>@Configuration</code>和<code>@ComponentScan</code>包不应重叠</strong><br><strong> 2.使用<code>RestTemplate</code>时，想要获得一个List时，应该用数组，而不应该直接用List</strong> </p><h3 id="9-Feign"><a href="#9-Feign" class="headerlink" title="9.Feign"></a>9.Feign</h3><p><strong>1.自定义配置时，<code>@Configuration</code>和<code>@ComponentScan</code>包不应重叠</strong><br><strong>2.<code>@FeignClient</code>所在的接口中，不支持<code>@GetMapping</code>等组合注解</strong><br><strong>3.使用<code>@PathVariable</code>时，需要指定其value</strong><br><strong>4.Feign暂不支持复杂对象作为一个参数</strong></p><p>转载自：<a href="http://www.itmuch.com/spring-cloud-sum-eureka/" target="_blank" rel="noopener">周立博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringCloud-常见问题总结&quot;&gt;&lt;a href=&quot;#SpringCloud-常见问题总结&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud 常见问题总结&quot;&gt;&lt;/a&gt;SpringCloud 常见问题总结&lt;/h1&gt;&lt;h3 id=&quot;1
      
    
    </summary>
    
      <category term="Java" scheme="https://rstyro.github.io/blog/categories/Java/"/>
    
    
      <category term="SpringCloud" scheme="https://rstyro.github.io/blog/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud （四）、Eureka高可用</title>
    <link href="https://rstyro.github.io/blog/2018/05/25/SpringCloud%20%EF%BC%88%E5%9B%9B%EF%BC%89%E3%80%81Eureka%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    <id>https://rstyro.github.io/blog/2018/05/25/SpringCloud （四）、Eureka高可用/</id>
    <published>2018-05-25T07:35:03.000Z</published>
    <updated>2019-01-13T05:18:43.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eureka-高可用"><a href="#Eureka-高可用" class="headerlink" title="Eureka 高可用"></a>Eureka 高可用</h1><p><strong>前面讲的例子，都离不开Eureka服务，如果说eureka 突然宕机了，那是不是所有的服务都没法用了。所以我们怎么也得弄几台才行啊</strong><br>我们看看官方文档的例子：<br><img src="/blog/2018/05/25/SpringCloud （四）、Eureka高可用/07841.png" alt=""></p><p><a href="http://cloud.spring.io/spring-cloud-static/Dalston.SR5/single/spring-cloud.html#_peer_awareness" target="_blank" rel="noopener">文档地址</a></p><p><strong>自己动手来吧</strong></p><h2 id="一、导入依赖"><a href="#一、导入依赖" class="headerlink" title="一、导入依赖"></a>一、导入依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="二、添加注解"><a href="#二、添加注解" class="headerlink" title="二、添加注解"></a>二、添加注解</h2><p><strong>给启动类添加<code>@EnableEurekaServer</code>注解</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class SpringcloudEurekaPeerApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringcloudEurekaPeerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="三、修改配置文件application-yml"><a href="#三、修改配置文件application-yml" class="headerlink" title="三、修改配置文件application.yml"></a>三、修改配置文件application.yml</h2><p>这里我配置了3个节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: Eureka-peer</span><br><span class="line">  profiles:</span><br><span class="line">    active: peer1</span><br><span class="line">---</span><br><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line">spring:</span><br><span class="line">  profiles: peer1</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: peer1</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://peer2:8762/eureka/,http://peer3:8763/eureka/</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">server:</span><br><span class="line">  port: 8762</span><br><span class="line">spring:</span><br><span class="line">  profiles: peer2</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: peer2</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://peer1:8761/eureka/,http://peer3:8763/eureka/</span><br><span class="line">---</span><br><span class="line">server:</span><br><span class="line">  port: 8763</span><br><span class="line">spring:</span><br><span class="line">  profiles: peer3</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: peer3</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://peer2:8762/eureka/,http://peer1:8761/eureka/</span><br></pre></td></tr></table></figure></p><h3 id="四、修改host文件"><a href="#四、修改host文件" class="headerlink" title="四、修改host文件"></a>四、修改host文件</h3><p><strong>添加如下内容</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       peer1 peer2 peer3</span><br></pre></td></tr></table></figure></p><p><img src="/blog/2018/05/25/SpringCloud （四）、Eureka高可用/47031.png" alt=""></p><p><strong>如果这个不配的话，它们3个是ping不通的</strong></p><p><strong>启动3个不同的profiles，然后访问：<br><a href="http://peer1:8761/" target="_blank" rel="noopener">http://peer1:8761/</a>、<br><a href="http://peer1:8761/" target="_blank" rel="noopener">http://peer2:8762/</a>、<br><a href="http://peer1:8761/" target="_blank" rel="noopener">http://peer3:8763/</a></strong><br>结果几乎差不多，说明我们已经配置成功了，如果我们再启动一个生产者，生产者的eureka地址只需要写其中3个的一个，访问这3个节点，他们的注册列表都会有这个服务<br><img src="/blog/2018/05/25/SpringCloud （四）、Eureka高可用/69704.png" alt=""></p><p><strong><a href="https://github.com/rstyro/SpringCloud/tree/master/SpringCloud-eurekaserver-peer" target="_blank" rel="noopener">Github 代码示例</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Eureka-高可用&quot;&gt;&lt;a href=&quot;#Eureka-高可用&quot; class=&quot;headerlink&quot; title=&quot;Eureka 高可用&quot;&gt;&lt;/a&gt;Eureka 高可用&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;前面讲的例子，都离不开Eureka服务，如果说eureka 
      
    
    </summary>
    
      <category term="Java" scheme="https://rstyro.github.io/blog/categories/Java/"/>
    
    
      <category term="SpringCloud" scheme="https://rstyro.github.io/blog/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud （三）、Feign使用示例</title>
    <link href="https://rstyro.github.io/blog/2018/05/25/SpringCloud%20%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%81Feign%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
    <id>https://rstyro.github.io/blog/2018/05/25/SpringCloud （三）、Feign使用示例/</id>
    <published>2018-05-25T06:29:25.000Z</published>
    <updated>2019-01-13T05:19:42.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><p><strong>Feign是一个声明式的Web Service客户端，它使得编写Web Serivce客户端变得更加简单。我们只需要使用Feign来创建一个接口并用注解来配置它既可完成。它具备可插拔的注解支持，包括Feign注解和JAX-RS注解。Feign也支持可插拔的编码器和解码器。Spring Cloud为Feign增加了对Spring MVC注解的支持，还整合了Ribbon和Eureka来提供均衡负载的HTTP客户端实现。</strong></p><p><strong>Spring Cloud Netflix 的微服务都是以 HTTP 接口的形式暴露的，所以可以用 Apache 的 HttpClient 或 Spring 的 RestTemplate 去调用，而 Feign 是一个使用起来更加方便的 HTTP 客戶端，使用起来就像是调用自身工程的方法，而感觉不到是调用远程方法</strong></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>结尾有Github地址的代码示例</strong></p><h2 id="一、使用SpringMVC注解"><a href="#一、使用SpringMVC注解" class="headerlink" title="一、使用SpringMVC注解"></a>一、使用SpringMVC注解</h2><h3 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2、加注解"><a href="#2、加注解" class="headerlink" title="2、加注解"></a>2、加注解</h3><p>在启动类上加注解<code>@EnableFeignClients</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class CustomerFeignApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main( String[] args )&#123;</span><br><span class="line">      SpringApplication.run(CustomerFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3、创建服务接口类"><a href="#3、创建服务接口类" class="headerlink" title="3、创建服务接口类"></a>3、创建服务接口类</h3><p>定义一个 <code>producer</code> 服务的接口类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(name=&quot;producer&quot;)</span><br><span class="line">public interface FeignClientService &#123;</span><br><span class="line"></span><br><span class="line">@RequestMapping(value=&quot;/item/&#123;id&#125;&quot;,method=RequestMethod.GET)</span><br><span class="line">public Object detai(@PathVariable(&quot;id&quot;) String id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RequestMapping(value=&quot;/add&quot;,method=RequestMethod.POST)</span><br><span class="line">public Object add(Item item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4、控制层调用"><a href="#4、控制层调用" class="headerlink" title="4、控制层调用"></a>4、控制层调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private FeignClientService feignClientService;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/provider/&#123;id&#125;&quot;)</span><br><span class="line">public Object test(@PathVariable String id) &#123;</span><br><span class="line">return feignClientService.detai(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/add&quot;)</span><br><span class="line">public Object test(Item item) &#123;</span><br><span class="line">return feignClientService.add(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、配置文件"><a href="#5、配置文件" class="headerlink" title="5、配置文件"></a>5、配置文件</h3><p>其实配置文件<code>application.yml</code>没什么特殊的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8903</span><br><span class="line">  </span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://rstyro:rstyropwd@localhost:8761/eureka</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: customer-feign</span><br></pre></td></tr></table></figure></p><p>启动eureka 和两个生产者与feign,查看结果，还是实现了负载均衡<br><img src="/blog/2018/05/25/SpringCloud （三）、Feign使用示例/26754.png" alt=""><br><img src="/blog/2018/05/25/SpringCloud （三）、Feign使用示例/14630.png" alt=""><br><img src="/blog/2018/05/25/SpringCloud （三）、Feign使用示例/08295.png" alt=""></p><p><strong>上面我们用的是<code>SpringMVC</code> 的注解,下面我们用feign 默认的注解，查看<a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">Github的地址</a> 里面介绍了基本用法</strong></p><h2 id="二、使用默认的注解"><a href="#二、使用默认的注解" class="headerlink" title="二、使用默认的注解"></a>二、使用默认的注解</h2><h3 id="1、自定义一个配置类FeignConfig"><a href="#1、自定义一个配置类FeignConfig" class="headerlink" title="1、自定义一个配置类FeignConfig"></a>1、自定义一个配置类FeignConfig</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class FeignConfig &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用它的默认配置</span><br><span class="line"> * </span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public Contract feignContract() &#123;</span><br><span class="line">return new feign.Contract.Default();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 加日志的</span><br><span class="line"> * http://cloud.spring.io/spring-cloud-static/Dalston.SR5/single/spring-cloud.html#_feign_logging</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">    Logger.Level feignLoggerLevel() &#123;</span><br><span class="line">        return Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、自定义一个服务接口类FeignClientService"><a href="#2、自定义一个服务接口类FeignClientService" class="headerlink" title="2、自定义一个服务接口类FeignClientService"></a>2、自定义一个服务接口类FeignClientService</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(name=&quot;producer&quot;,configuration=FeignConfig.class)</span><br><span class="line">public interface FeignClientService &#123;</span><br><span class="line"></span><br><span class="line">//https://github.com/OpenFeign/feign 有例子</span><br><span class="line">@RequestLine(&quot;GET /item/&#123;id&#125;&quot;)</span><br><span class="line">public Object detai(@Param(&quot;id&quot;) String id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RequestLine(&quot;POST /add&quot;)</span><br><span class="line">public Object add(Item item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、调用"><a href="#3、调用" class="headerlink" title="3、调用"></a>3、调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private FeignClientService feignClientService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/provider/&#123;id&#125;&quot;)</span><br><span class="line">public Object test(@PathVariable String id) &#123;</span><br><span class="line">return feignClientService.detai(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/add&quot;)</span><br><span class="line">public Object test(Item item) &#123;</span><br><span class="line">return feignClientService.add(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、配置文件"><a href="#4、配置文件" class="headerlink" title="4、配置文件"></a>4、配置文件</h3><p>如果机子的性能比较差什么的，第一次请求会报一个请求超时异常，解决方案看下面配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8904</span><br><span class="line">  </span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://rstyro:rstyropwd@localhost:8761/eureka</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: customer-feign-default</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    top.lrshuai.cloud.springcloud.feign.FeignClientService: DEBUG</span><br><span class="line">    </span><br><span class="line"># 解决第一次请求报超时异常的方案：</span><br><span class="line">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 5000</span><br><span class="line"># 或者：</span><br><span class="line"># hystrix.command.default.execution.timeout.enabled: false</span><br><span class="line"># 或者：</span><br><span class="line"># feign.hystrix.enabled: false ## 索性禁用feign的hystrix</span><br></pre></td></tr></table></figure></p><h5 id="超时的issue：https-github-com-spring-cloud-spring-cloud-netflix-issues-768"><a href="#超时的issue：https-github-com-spring-cloud-spring-cloud-netflix-issues-768" class="headerlink" title="超时的issue：https://github.com/spring-cloud/spring-cloud-netflix/issues/768"></a>超时的issue：<a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/768" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-netflix/issues/768</a></h5><h5 id="超时的解决方案：-http-stackoverflow-com-questions-27375557-hystrix-command-fails-with-timed-out-and-no-fallback-available"><a href="#超时的解决方案：-http-stackoverflow-com-questions-27375557-hystrix-command-fails-with-timed-out-and-no-fallback-available" class="headerlink" title="超时的解决方案： http://stackoverflow.com/questions/27375557/hystrix-command-fails-with-timed-out-and-no-fallback-available"></a>超时的解决方案： <a href="http://stackoverflow.com/questions/27375557/hystrix-command-fails-with-timed-out-and-no-fallback-available" target="_blank" rel="noopener">http://stackoverflow.com/questions/27375557/hystrix-command-fails-with-timed-out-and-no-fallback-available</a></h5><h5 id="hystrix配置：-https-github-com-Netflix-Hystrix-wiki-Configuration-execution-isolation-thread-timeoutInMilliseconds"><a href="#hystrix配置：-https-github-com-Netflix-Hystrix-wiki-Configuration-execution-isolation-thread-timeoutInMilliseconds" class="headerlink" title="hystrix配置： https://github.com/Netflix/Hystrix/wiki/Configuration#execution.isolation.thread.timeoutInMilliseconds"></a>hystrix配置： <a href="https://github.com/Netflix/Hystrix/wiki/Configuration#execution.isolation.thread.timeoutInMilliseconds" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Configuration#execution.isolation.thread.timeoutInMilliseconds</a></h5><h5 id="上面的Github代码地址：demo1、demo2"><a href="#上面的Github代码地址：demo1、demo2" class="headerlink" title="上面的Github代码地址：demo1、demo2"></a>上面的Github代码地址：<a href="https://github.com/rstyro/SpringCloud/tree/master/SpringCloud-customer-feign" target="_blank" rel="noopener">demo1</a>、<a href="https://github.com/rstyro/SpringCloud/tree/master/SpringCloud-customer-feign-default" target="_blank" rel="noopener">demo2</a></h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Feign&quot;&gt;&lt;a href=&quot;#Feign&quot; class=&quot;headerlink&quot; title=&quot;Feign&quot;&gt;&lt;/a&gt;Feign&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Feign是一个声明式的Web Service客户端，它使得编写Web Serivce客户端变得更加
      
    
    </summary>
    
      <category term="Java" scheme="https://rstyro.github.io/blog/categories/Java/"/>
    
    
      <category term="SpringCloud" scheme="https://rstyro.github.io/blog/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud （二）、Ribbon客户端负载均衡</title>
    <link href="https://rstyro.github.io/blog/2018/05/25/SpringCloud%20%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%81Ribbon%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>https://rstyro.github.io/blog/2018/05/25/SpringCloud （二）、Ribbon客户端负载均衡/</id>
    <published>2018-05-25T03:56:20.000Z</published>
    <updated>2019-01-13T04:06:06.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h1><p><strong> 学过Nginx的都知道它是一个服务端负载均衡器，而Ribbon 也是一个负载均衡器，只不过它是基于基于HTTP和TCP的客户端负载均衡器。</strong></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><strong> 1、启动一个eureka服务</strong><br><strong> 2、一个生产者集群，有两个节点（端口7900、端口7901）</strong><br><strong> 3、一个ribbon 客户端</strong> </p><p><strong> 生产者我们用上次的代码即可，下面是ribbon客户端的代码实现。</strong></p><h3 id="一、使用默认的负载均衡策略（轮询）"><a href="#一、使用默认的负载均衡策略（轮询）" class="headerlink" title="一、使用默认的负载均衡策略（轮询）"></a>一、使用默认的负载均衡策略（轮询）</h3><h4 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h4><p><strong> 官方的文档是需要导入<code>spring-cloud-starter-ribbon</code> 依赖，如下图</strong><br><img src="/blog/2018/05/25/SpringCloud （二）、Ribbon客户端负载均衡/38912.png" alt=""><br><strong>但是呢，我们需要导入的eureka的依赖已经包含了ribbon的依赖</strong><br><img src="/blog/2018/05/25/SpringCloud （二）、Ribbon客户端负载均衡/09761.png" alt=""><br><strong>所以导入<code>spring-cloud-starter-eureka</code>即可</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h4 id="2、加上注解"><a href="#2、加上注解" class="headerlink" title="2、加上注解"></a>2、加上注解</h4><p><strong>只需要在客户端的RestTemplate <code>bean</code>上加上注解<code>@LoadBalanced</code>即可用默认的负载均衡策略（轮询）。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class CustomerRibbonApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main( String[] args )&#123;</span><br><span class="line">      SpringApplication.run(CustomerRibbonApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Bean</span><br><span class="line">    @LoadBalanced</span><br><span class="line">    public RestTemplate restTemlate() &#123;</span><br><span class="line">    return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、控制层访问生产者"><a href="#3、控制层访问生产者" class="headerlink" title="3、控制层访问生产者"></a>3、控制层访问生产者</h4><p><strong>常规我们的restTemplate.getForObject()的第一个参数地址是写死的，这里我们写上<code>服务名称</code> producer即可</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/provider/&#123;id&#125;&quot;)</span><br><span class="line">public Object test(@PathVariable(&quot;id&quot;) String id) &#123;</span><br><span class="line">Object obj = restTemplate.getForObject(&quot;http://producer/item/&quot;+id,Object.class);</span><br><span class="line">System.out.println(&quot;obj=&quot;+obj.toString());</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="把生产者和eureka服务与ribbon客户端启之后，我们看看eureka-的服务注册情况"><a href="#把生产者和eureka服务与ribbon客户端启之后，我们看看eureka-的服务注册情况" class="headerlink" title="把生产者和eureka服务与ribbon客户端启之后，我们看看eureka 的服务注册情况"></a>把生产者和eureka服务与ribbon客户端启之后，我们看看eureka 的服务注册情况</h4><p><img src="/blog/2018/05/25/SpringCloud （二）、Ribbon客户端负载均衡/78912.png" alt=""></p><p>因为我们知道<code>生产者</code>有一个片段代码是长这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/item/&#123;id&#125;&quot;)</span><br><span class="line">public Object test(@PathVariable(&quot;id&quot;)String id,HttpServletRequest request) &#123;</span><br><span class="line">int port = request.getServerPort();</span><br><span class="line">System.out.println(&quot;item---id,port:&quot;+port);</span><br><span class="line">return new Item(id,port+&quot;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们浏览器访问：<br><a href="http://localhost:8901/provider/1" target="_blank" rel="noopener">http://localhost:8901/provider/1</a><br>刚好调用的是<code>生产者</code>的<code>/item/{id}</code>这个接口，我们可以观察控制台的打印情况，知道负载均衡是否有效,我们多请求几次，然后看控制台的代码如下：<br><img src="/blog/2018/05/25/SpringCloud （二）、Ribbon客户端负载均衡/71435.png" alt=""></p><p><strong> 从打印结果知道，我们已经成功实现了负载均衡 </strong><br><strong> 还有就是，这个默认的是轮询的负载均衡，我们怎么自定义自己的负载均衡策略，看下面第二种情况 </strong></p><h3 id="二、自定义负载均衡策略"><a href="#二、自定义负载均衡策略" class="headerlink" title="二、自定义负载均衡策略"></a>二、自定义负载均衡策略</h3><h4 id="1、创建一个自定义的配置类RuleConfig"><a href="#1、创建一个自定义的配置类RuleConfig" class="headerlink" title="1、创建一个自定义的配置类RuleConfig"></a>1、创建一个自定义的配置类RuleConfig</h4><blockquote><p>这个配置类的路径，不要在启动类的包路径之下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Configurable</span><br><span class="line">public class RuleConfig &#123;</span><br><span class="line">@Bean</span><br><span class="line">public IRule ribbonRule(IClientConfig config) &#123;</span><br><span class="line">//RandomRule 是随机策略</span><br><span class="line">return new RandomRule();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、启动类加注解"><a href="#2、启动类加注解" class="headerlink" title="2、启动类加注解"></a>2、启动类加注解</h4><p><code>@RibbonClient</code>注解给哪个服务启动负载均衡策略，参数中的name 是服务名称，configuration 后面跟着是负载均衡自定义配置类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@RibbonClient(name=&quot;producer2&quot;,configuration=RuleConfig.class)</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class CustomerRibbonApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main( String[] args )&#123;</span><br><span class="line">      SpringApplication.run(CustomerRibbonApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Bean</span><br><span class="line">    @LoadBalanced</span><br><span class="line">    public RestTemplate restTemlate() &#123;</span><br><span class="line">    return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、测试是否生效"><a href="#3、测试是否生效" class="headerlink" title="3、测试是否生效"></a>3、测试是否生效</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/test&quot;)</span><br><span class="line">public Object test2() &#123;</span><br><span class="line">//下面是当前的访问请求producer2服务中，具体选择的是哪个服务</span><br><span class="line">ServiceInstance serverInstance = loadBalancerClient.choose(&quot;producer2&quot;);</span><br><span class="line">String result = &quot;====&quot;+serverInstance.getHost()+&quot;:&quot;+serverInstance.getPort();</span><br><span class="line">System.out.println(result);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="eureka-服务注册情况"><a href="#eureka-服务注册情况" class="headerlink" title="eureka 服务注册情况"></a>eureka 服务注册情况</h4><p><img src="/blog/2018/05/25/SpringCloud （二）、Ribbon客户端负载均衡/41275.png" alt=""></p><p>多次访问：<a href="http://localhost:8901/test" target="_blank" rel="noopener">http://localhost:8901/test</a><br>查看控制台<br><img src="/blog/2018/05/25/SpringCloud （二）、Ribbon客户端负载均衡/93257.png" alt=""><br><strong>可以知道是随机的，还有一种是，如果我想要<code>producer</code>服务 是默认的，<code>producer2</code>服务是随机的，怎么配置</strong><br><strong> 其实很简单，想要的默认的不需要配置，只配置你想要自定义的即可，如下：随机加轮询</strong><br><img src="/blog/2018/05/25/SpringCloud （二）、Ribbon客户端负载均衡/46308.png" alt=""></p><p><strong><a href="https://github.com/rstyro/SpringCloud" target="_blank" rel="noopener">Github代码地址</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ribbon&quot;&gt;&lt;a href=&quot;#Ribbon&quot; class=&quot;headerlink&quot; title=&quot;Ribbon&quot;&gt;&lt;/a&gt;Ribbon&lt;/h1&gt;&lt;p&gt;&lt;strong&gt; 学过Nginx的都知道它是一个服务端负载均衡器，而Ribbon 也是一个负载均衡器，只不过
      
    
    </summary>
    
      <category term="Java" scheme="https://rstyro.github.io/blog/categories/Java/"/>
    
    
      <category term="SpringCloud" scheme="https://rstyro.github.io/blog/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud （一）、服务注册与发现</title>
    <link href="https://rstyro.github.io/blog/2018/05/07/SpringCloud%20%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    <id>https://rstyro.github.io/blog/2018/05/07/SpringCloud （一）、服务注册与发现/</id>
    <published>2018-05-07T06:51:35.000Z</published>
    <updated>2019-01-12T14:49:03.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h1><p><strong><br>    “微服务架构” 在之前几年久很火爆了，以至于现在关于微服务的文章很多，资料也是海量，社区同样也是很活跃。<br>    微服务架构 的两大主流 应该就是SpringCloud 与 dubbo 了。<br>    说了那么多，微服务是什么呢？<br>    简单的说，微服务架构就是将一个完整的应用垂直拆分成多个不同的服务，每个服务都是一个个体，可以独立部署、独立维护、独立扩展、服务与服务之间<br>    通过诸如RESTful API 的方式相互调用。</strong></p><h2 id="Spring-Cloud-简介"><a href="#Spring-Cloud-简介" class="headerlink" title="Spring Cloud 简介"></a>Spring Cloud 简介</h2><p><strong><br>Spring Cloud是一个基于Spring Boot实现的云应用开发工具，它为基于JVM的云应用开发中涉及的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。</strong></p><p><strong><br>Spring Cloud包含了多个子项目（针对分布式系统中涉及的多个不同开源产品），比如：Spring Cloud Config、Spring Cloud Netflix、Spring Cloud0 CloudFoundry、Spring Cloud AWS、Spring Cloud Security、Spring Cloud Commons、Spring Cloud Zookeeper、Spring Cloud CLI等项目。</strong></p><p><strong> <a href="https://github.com/spring-cloud" target="_blank" rel="noopener">Github地址</a> </strong></p><h2 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h2><p><strong><br>    假设现在有两个服务接口 ，一个是生产者（producer）,一个是消费者（customer）,customer 现在要调用producer，可以通过RestTemplate 进行调用，比如</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/provider/&#123;id&#125;&quot;)</span><br><span class="line">public Object test(@PathVariable(&quot;id&quot;) String id) &#123;</span><br><span class="line">//producerServicePath 是生产者服务提供的接口</span><br><span class="line">return restTemplate.getForObject(producerServicePath+id,Object.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><br>这样就产生一个问题，我们发现producerServicePath 这个地址是写死的，硬编码了，对后期维护是很不方便的。所以需要一个服务注册中心，我们只需要向服务中心请求具体的服务名即可，不需要知道具体的请求地址。<br>这服务注册中心怎么实现呢，Springcloud 支持多种的服务治理框架，比如：Eureka、Consul、Zookeeper….，<br>选一种 那就Eureka 吧。因为啥，因为我喜欢啊。哈哈</strong><br><strong><br>Spring Cloud Eureka是Spring Cloud Netflix项目下的服务治理模块。而Spring Cloud Netflix项目是Spring Cloud的子项目之一，主要内容是对Netflix公司一系列开源产品的包装，它为Spring Boot应用提供了自配置的Netflix OSS整合。通过一些简单的注解，开发者就可以快速的在应用中配置一下常用模块并构建庞大的分布式系统。它主要提供的模块包括：服务发现（Eureka），断路器（Hystrix），智能路由（Zuul），客户端负载均衡（Ribbon）等。</strong></p><h2 id="创建服务注册中心"><a href="#创建服务注册中心" class="headerlink" title="创建服务注册中心"></a>创建服务注册中心</h2><p>SpringCloud 有几个版本，我现在用的是<code>Dalston SR5</code></p><h3 id="一、引入依赖"><a href="#一、引入依赖" class="headerlink" title="一、引入依赖"></a>一、引入依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.12.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;Dalston.SR5&lt;/version&gt;</span><br><span class="line">           &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">           &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"> &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 安全认证 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="二、加入注解"><a href="#二、加入注解" class="headerlink" title="二、加入注解"></a>二、加入注解</h3><p><strong>在启动类加入 <code>@EnableEurekaServer</code> 注解,如下例子</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class SpringcloudEurekaApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringcloudEurekaApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="三、配置application-yml"><a href="#三、配置application-yml" class="headerlink" title="三、配置application.yml"></a>三、配置application.yml</h3><p><strong><br><code>eureka.client.registerWithEureka</code> ：表示是否将自己注册到Eureka Server，默认为true。由于当前这个应用就是Eureka Server，故而设为false。<br><code>eureka.client.fetchRegistry</code> ：表示是否从Eureka Server获取注册信息，默认为true。因为这是一个单点的Eureka Server，不需要同步其他的Eureka Server节点的数据，故而设为false。<br><code>eureka.client.serviceUrl.defaultZone</code> ：设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。默认是<a href="http://localhost:8761/eureka" target="_blank" rel="noopener">http://localhost:8761/eureka</a> ；多个地址可使用 , 分隔。</strong></p><p><strong> Eureka的配置类所在类：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean</span><br><span class="line">org.springframework.cloud.netflix.eureka.EurekaClientConfigBean</span><br><span class="line">org.springframework.cloud.netflix.eureka.server.EurekaServerConfigBean</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># security 这个的配置是当访问eureka时需要登陆，不要也是可以的</span><br><span class="line">security:</span><br><span class="line">  basic:</span><br><span class="line">    enabled: true</span><br><span class="line">  user:</span><br><span class="line">    name: rstyro</span><br><span class="line">    password: rstyropwd</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false</span><br><span class="line">    fetch-registry: false</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://rstyro:rstyropwd@localhost:8761/eureka</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动，访问: <a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a><br><img src="/blog/2018/05/07/SpringCloud （一）、服务注册与发现/67359.png" alt=""><br>输入用户名（rstyro）密码(rstyropwd) 登陆之后显示如下的界面，说明启动成功<br><img src="/blog/2018/05/07/SpringCloud （一）、服务注册与发现/87412.png" alt=""><br>看 <code>Instances currently registered with Eureka</code> 是空的，当前还没有什么服务注册进来</p><h2 id="创建生产者"><a href="#创建生产者" class="headerlink" title="创建生产者"></a>创建生产者</h2><h3 id="一、引入依赖-1"><a href="#一、引入依赖-1" class="headerlink" title="一、引入依赖"></a>一、引入依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.12.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;Dalston.SR5&lt;/version&gt;</span><br><span class="line">           &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">           &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="二、加入注解-1"><a href="#二、加入注解-1" class="headerlink" title="二、加入注解"></a>二、加入注解</h3><p><strong>在启动类加入<code>@EnableEurekaClient</code>注解</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class ProducerApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(ProducerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="三、配置application"><a href="#三、配置application" class="headerlink" title="三、配置application"></a>三、配置application</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># rstyro:rstyropwd 是在eureka 中配置的用户名和密码，如果不配的话，这里不写</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://rstyro:rstyropwd@localhost:8761/eureka</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: producer</span><br><span class="line">    </span><br><span class="line">server:</span><br><span class="line">  port: 7900</span><br></pre></td></tr></table></figure><h2 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h2><p><strong><br>和创建生产者的代码是差不多一样的，这里就不写出来了。<br>启动 生产者和消费者，刷新Eureka 界面</strong><br><img src="/blog/2018/05/07/SpringCloud （一）、服务注册与发现/96537.png" alt=""><br><strong><br>发现我们的两个服务已经注册进来了,说明我们的两个服务已经成功注册到Eureka里面去了<br>接下来讲如何不需要写硬编码，使用Ribbon</strong></p><p><strong>可以参考：<a href="http://cloud.spring.io/spring-cloud-static/Dalston.SR5/single/spring-cloud.html#_service_discovery_eureka_clients" target="_blank" rel="noopener">SpringCloud文档</a></strong></p><h4 id="Github代码示例"><a href="#Github代码示例" class="headerlink" title="Github代码示例"></a><a href="https://github.com/rstyro/SpringCloud" target="_blank" rel="noopener">Github代码示例</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微服务架构&quot;&gt;&lt;a href=&quot;#微服务架构&quot; class=&quot;headerlink&quot; title=&quot;微服务架构&quot;&gt;&lt;/a&gt;微服务架构&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;br&gt;    “微服务架构” 在之前几年久很火爆了，以至于现在关于微服务的文章很多，资料也是海量，
      
    
    </summary>
    
      <category term="Java" scheme="https://rstyro.github.io/blog/categories/Java/"/>
    
    
      <category term="SpringCloud" scheme="https://rstyro.github.io/blog/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 搭建https</title>
    <link href="https://rstyro.github.io/blog/2018/01/18/Nginx%20%E6%90%AD%E5%BB%BAhttps/"/>
    <id>https://rstyro.github.io/blog/2018/01/18/Nginx 搭建https/</id>
    <published>2018-01-18T10:12:13.000Z</published>
    <updated>2019-01-12T14:49:03.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx-搭建https"><a href="#nginx-搭建https" class="headerlink" title="nginx 搭建https"></a>nginx 搭建https</h1><h2 id="一、创建SSL证书"><a href="#一、创建SSL证书" class="headerlink" title="一、创建SSL证书"></a>一、创建SSL证书</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/nginx/ssl</span><br><span class="line">openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt</span><br></pre></td></tr></table></figure><h5 id="创建了有效期100年，加密强度为RSA2048的SSL密钥key和X509证书文件。"><a href="#创建了有效期100年，加密强度为RSA2048的SSL密钥key和X509证书文件。" class="headerlink" title="创建了有效期100年，加密强度为RSA2048的SSL密钥key和X509证书文件。"></a>创建了有效期100年，加密强度为RSA2048的SSL密钥key和X509证书文件。</h5><table><thead><tr><th></th><th>参数说明:</th></tr></thead><tbody><tr><td><code>req</code></td><td>配置参数-x509指定使用 X.509证书签名请求管理(certificate signing request (CSR)).”X.509” 是一个公钥代表that SSL and TLS adheres to for its key and certificate management.</td></tr><tr><td><code>-nodes</code></td><td>告诉OpenSSL生产证书时忽略密码环节.(因为我们需要Nginx自动读取这个文件，而不是以用户交互的形式)。</td></tr><tr><td><code>-days 36500</code></td><td>证书有效期，100年</td></tr><tr><td><code>-newkey rsa:2048</code></td><td>同时产生一个新证书和一个新的SSL key(加密强度为RSA 2048)</td></tr><tr><td><code>-keyout</code></td><td>SSL输出文件名</td></tr><tr><td><code>-out</code></td><td>证书生成文件名</td></tr></tbody></table><blockquote><p>它会问一些问题。需要注意的是在common name中填入网站域名，如wiki.xby1993.net即可生成该站点的证书，同时也可以使用泛域名如*.xby1993.net来生成所有二级域名可用的网站证书。<br>整个问题应该如下所示:</p></blockquote><p><img src="/blog/2018/01/18/Nginx 搭建https/upload/images/78490.png" alt=""></p><h2 id="二、nginx配置-ssl"><a href="#二、nginx配置-ssl" class="headerlink" title="二、nginx配置 ssl"></a>二、nginx配置 ssl</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 我下面这个配置是http 和https 都可以用的</span><br><span class="line"># 如果只要https的话，把：listen:80 去掉</span><br><span class="line">server &#123;</span><br><span class="line">listen      80;</span><br><span class="line">listen 443 ssl;</span><br><span class="line">ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">keepalive_timeout   70;</span><br><span class="line">server_name 服务器ip;</span><br><span class="line">server_tokens off;</span><br><span class="line">fastcgi_param   HTTPS               on;</span><br><span class="line">fastcgi_param   HTTP_SCHEME         https;</span><br><span class="line"></span><br><span class="line">access_log      /var/log/nginx/rstyro.access.log;</span><br><span class="line">error_log       /var/log/nginx/rstyro.error.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">附录1、证书格式说明</span><br><span class="line">.crt：自签名的证书</span><br><span class="line">.csr：证书的请求(用于向证书颁发机构申请crt证书时使用，nginx配置时不会用到)</span><br><span class="line">.key：SSL Key (分为不带口令和带口令版本)。</span><br><span class="line">我们自签名证书配置nginx需要的是.crt证书，和不带口令的SSL Key的.key文件。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">附录2、可靠的第三方SSL证书颁发机构</span><br><span class="line">目前一般市面上针对中小站长和企业的 SSL 证书颁发机构有：</span><br><span class="line">StartSSL</span><br><span class="line">Comodo / 子品牌 Positive SSL</span><br><span class="line">GlobalSign / 子品牌 AlphaSSL</span><br><span class="line">GeoTrust / 子品牌 RapidSSL</span><br></pre></td></tr></table></figure><blockquote><p>转载自：<a href="https://segmentfault.com/a/1190000004976222" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004976222</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nginx-搭建https&quot;&gt;&lt;a href=&quot;#nginx-搭建https&quot; class=&quot;headerlink&quot; title=&quot;nginx 搭建https&quot;&gt;&lt;/a&gt;nginx 搭建https&lt;/h1&gt;&lt;h2 id=&quot;一、创建SSL证书&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="开发工具" scheme="https://rstyro.github.io/blog/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Nginx" scheme="https://rstyro.github.io/blog/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Docker（六）、启动mysql时自动执行脚本</title>
    <link href="https://rstyro.github.io/blog/2018/01/18/Docker%EF%BC%88%E5%85%AD%EF%BC%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
    <id>https://rstyro.github.io/blog/2018/01/18/Docker（六）、启动mysql时自动执行脚本/</id>
    <published>2018-01-18T09:34:52.000Z</published>
    <updated>2019-01-13T05:21:55.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-启动mysql时自动执行脚本"><a href="#docker-启动mysql时自动执行脚本" class="headerlink" title="docker 启动mysql时自动执行脚本"></a>docker 启动mysql时自动执行脚本</h1><h5 id="上次已经运行了一个-tomcat-我们还需要一个数据库，docker-运行一个mysql-是很简单的比如"><a href="#上次已经运行了一个-tomcat-我们还需要一个数据库，docker-运行一个mysql-是很简单的比如" class="headerlink" title="上次已经运行了一个 tomcat 我们还需要一个数据库，docker 运行一个mysql 是很简单的比如"></a>上次已经运行了一个 tomcat 我们还需要一个数据库，docker 运行一个mysql 是很简单的比如</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name testmysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=admin mysql</span><br></pre></td></tr></table></figure><ul><li>MYSQL_ROOT_PASSWORD=root，指定 root 用户名密码 root</li><li>MYSQL_DATABASE=admin 容器运行时创建一个数据库名为 admin<br>但是这样只能获得一个空的数据库，我们需要有数据的数据库，so</li></ul><h4 id="其实mysql的官方镜像是支持这个能力的，在容器启动的时候自动执行指定的sql脚本或者shell脚本，我们一起来看看mysql官方镜像的Dockerfile，如下图："><a href="#其实mysql的官方镜像是支持这个能力的，在容器启动的时候自动执行指定的sql脚本或者shell脚本，我们一起来看看mysql官方镜像的Dockerfile，如下图：" class="headerlink" title="其实mysql的官方镜像是支持这个能力的，在容器启动的时候自动执行指定的sql脚本或者shell脚本，我们一起来看看mysql官方镜像的Dockerfile，如下图："></a>其实mysql的官方镜像是支持这个能力的，在容器启动的时候自动执行指定的sql脚本或者shell脚本，我们一起来看看<a href="https://github.com/docker-library/mysql/blob/7a850980c4b0d5fb5553986d280ebfb43230a6bb/8.0/Dockerfile" target="_blank" rel="noopener">mysql官方镜像的Dockerfile</a>，如下图：</h4><p><img src="/blog/2018/01/18/Docker（六）、启动mysql时自动执行脚本/75031.png" alt=""></p><h4 id="已经设定了ENTRYPOINT，里面会调用-entrypoint-sh这个脚本，我们把镜像pull到本地，再用docker-run启动起来，进入容器看看里面的entrypoint-sh这个脚本的内容，有一段内容就是从固定目录下遍历所有的-sh和-sql后缀的文件，然后执行，如下图："><a href="#已经设定了ENTRYPOINT，里面会调用-entrypoint-sh这个脚本，我们把镜像pull到本地，再用docker-run启动起来，进入容器看看里面的entrypoint-sh这个脚本的内容，有一段内容就是从固定目录下遍历所有的-sh和-sql后缀的文件，然后执行，如下图：" class="headerlink" title="已经设定了ENTRYPOINT，里面会调用/entrypoint.sh这个脚本，我们把镜像pull到本地，再用docker run启动起来，进入容器看看里面的entrypoint.sh这个脚本的内容，有一段内容就是从固定目录下遍历所有的.sh和.sql后缀的文件，然后执行，如下图："></a>已经设定了ENTRYPOINT，里面会调用/entrypoint.sh这个脚本，我们把镜像pull到本地，再用docker run启动起来，进入容器看看里面的entrypoint.sh这个脚本的内容，有一段内容就是从固定目录下遍历所有的.sh和.sql后缀的文件，然后执行，如下图：</h4><p><img src="/blog/2018/01/18/Docker（六）、启动mysql时自动执行脚本/upload/images/73590.png" alt=""></p><h5 id="搞清楚原理了，现在我们来实战吧"><a href="#搞清楚原理了，现在我们来实战吧" class="headerlink" title="搞清楚原理了，现在我们来实战吧"></a>搞清楚原理了，现在我们来实战吧</h5><h2 id="一、创建-Dockerfile-文件"><a href="#一、创建-Dockerfile-文件" class="headerlink" title="一、创建 Dockerfile 文件"></a>一、创建 Dockerfile 文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># mysql 官方镜像</span><br><span class="line">FROM docker.io/mysql</span><br><span class="line"></span><br><span class="line">#作者</span><br><span class="line">MAINTAINER rstyro &lt;rstyro@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">#定义会被容器自动执行的目录</span><br><span class="line">ENV AUTO_RUN_DIR /docker-entrypoint-initdb.d</span><br><span class="line"></span><br><span class="line">#定义初始化sql文件</span><br><span class="line">ENV INIT_SQL admin.sql</span><br><span class="line"></span><br><span class="line">#把要执行的sql文件放到/docker-entrypoint-initdb.d/目录下，容器会自动执行这个sql</span><br><span class="line">COPY ./$INIT_SQL $AUTO_RUN_DIR/</span><br><span class="line"></span><br><span class="line">#给执行文件增加可执行权限</span><br><span class="line">RUN chmod a+x $AUTO_RUN_DIR/$INIT_SQL</span><br></pre></td></tr></table></figure><h2 id="二、admin-sql-文件"><a href="#二、admin-sql-文件" class="headerlink" title="二、admin.sql 文件"></a>二、admin.sql 文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS `admin`;</span><br><span class="line">CREATE DATABASE `admin` character set utf8mb4;</span><br><span class="line">USE `admin`;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS=0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for `sys_login`</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_login`;</span><br><span class="line">CREATE TABLE `sys_login` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` int(11) NOT NULL,</span><br><span class="line">  `last_login_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;最后登录时间&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=73 DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for `sys_menu`</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_menu`;</span><br><span class="line">CREATE TABLE `sys_menu` (</span><br><span class="line">  `menu_id` int(11) NOT NULL,</span><br><span class="line">  `parent_id` int(11) DEFAULT NULL,</span><br><span class="line">  `menu_name` varchar(50) DEFAULT NULL,</span><br><span class="line">  `menu_url` varchar(50) DEFAULT &apos;#&apos;,</span><br><span class="line">  `menu_type` enum(&apos;2&apos;,&apos;1&apos;) DEFAULT &apos;2&apos; COMMENT &apos;1 -- 系统菜单，2 -- 业务菜单&apos;,</span><br><span class="line">  `menu_icon` varchar(50) DEFAULT &apos;#&apos;,</span><br><span class="line">  `sort_num` int(11) DEFAULT &apos;1&apos;,</span><br><span class="line">  `user_id` int(11) DEFAULT &apos;1&apos; COMMENT &apos;创建这个菜单的用户id&apos;,</span><br><span class="line">  `is_del` int(11) DEFAULT &apos;0&apos; COMMENT &apos;1-- 删除状态，0 -- 正常&apos;,</span><br><span class="line">  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  `create_time` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`menu_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_menu</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_menu` VALUES (&apos;1&apos;, &apos;0&apos;, &apos;系统管理&apos;, &apos;#&apos;, &apos;1&apos;, &apos;fa fa-gears&apos;, &apos;1&apos;, &apos;1&apos;, &apos;0&apos;, &apos;2017-09-08 16:15:24&apos;, &apos;2017-09-07 14:52:41&apos;);</span><br><span class="line">INSERT INTO `sys_menu` VALUES (&apos;2&apos;, &apos;1&apos;, &apos;菜单管理&apos;, &apos;menu/list&apos;, &apos;1&apos;, &apos;#&apos;, &apos;1&apos;, &apos;1&apos;, &apos;0&apos;, &apos;2017-09-12 11:28:09&apos;, &apos;2017-09-07 14:52:41&apos;);</span><br><span class="line">INSERT INTO `sys_menu` VALUES (&apos;3&apos;, &apos;1&apos;, &apos;角色管理&apos;, &apos;role/list&apos;, &apos;1&apos;, null, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;2017-09-07 17:58:52&apos;, &apos;2017-09-07 14:52:41&apos;);</span><br><span class="line">INSERT INTO `sys_menu` VALUES (&apos;4&apos;, &apos;1&apos;, &apos;用户管理&apos;, &apos;user/list&apos;, &apos;1&apos;, &apos;&apos;, &apos;3&apos;, &apos;1&apos;, &apos;0&apos;, &apos;2017-09-12 09:44:48&apos;, &apos;2017-09-07 14:52:41&apos;);</span><br><span class="line">INSERT INTO `sys_menu` VALUES (&apos;5&apos;, &apos;0&apos;, &apos;业务菜单&apos;, &apos;#&apos;, &apos;2&apos;, &apos;fa fa-tasks&apos;, &apos;2&apos;, &apos;1&apos;, &apos;0&apos;, &apos;2017-09-07 14:53:33&apos;, &apos;2017-09-07 14:52:41&apos;);</span><br><span class="line">INSERT INTO `sys_menu` VALUES (&apos;6&apos;, &apos;5&apos;, &apos;随便添加的子菜单&apos;, &apos;page/t4&apos;, &apos;2&apos;, &apos;&apos;, &apos;1&apos;, &apos;1&apos;, &apos;0&apos;, &apos;2017-09-14 15:45:28&apos;, &apos;2017-09-07 14:52:41&apos;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for `sys_role`</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_role`;</span><br><span class="line">CREATE TABLE `sys_role` (</span><br><span class="line">  `role_id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `role_name` varchar(50) DEFAULT NULL COMMENT &apos;角色名&apos;,</span><br><span class="line">  `role_desc` varchar(255) DEFAULT NULL,</span><br><span class="line">  `rights` varchar(255) DEFAULT &apos;0&apos; COMMENT &apos;最大权限的值&apos;,</span><br><span class="line">  `add_qx` varchar(255) DEFAULT &apos;0&apos;,</span><br><span class="line">  `del_qx` varchar(255) DEFAULT &apos;0&apos;,</span><br><span class="line">  `edit_qx` varchar(255) DEFAULT &apos;0&apos;,</span><br><span class="line">  `query_qx` varchar(255) DEFAULT &apos;0&apos;,</span><br><span class="line">  `user_id` varchar(10) DEFAULT NULL,</span><br><span class="line">  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`role_id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_role` VALUES (&apos;1&apos;, &apos;管理员&apos;, &apos;管理员权限&apos;, &apos;1267650600228229401496703205375&apos;, &apos;1&apos;, &apos;1&apos;, &apos;126&apos;, &apos;126&apos;, &apos;1&apos;, &apos;2017-09-12 15:38:56&apos;);</span><br><span class="line">INSERT INTO `sys_role` VALUES (&apos;2&apos;, &apos;tyro&apos;, &apos;随便创建的随便创建的随便创建的随便创建的随便创建的随便创建的随便创建的随便创建的随便创建的随便创建的&apos;, &apos;94&apos;, &apos;2&apos;, &apos;1&apos;, &apos;4&apos;, &apos;126&apos;, &apos;1&apos;, &apos;2017-09-12 15:44:06&apos;);</span><br><span class="line">INSERT INTO `sys_role` VALUES (&apos;3&apos;, &apos;test&apos;, &apos;是测试角色这个是测试角色这个是测试角色这个是测试角色这个是测试角色&apos;, &apos;382&apos;, &apos;382&apos;, &apos;382&apos;, &apos;382&apos;, &apos;126&apos;, &apos;1&apos;, &apos;2017-09-12 15:39:28&apos;);</span><br><span class="line">INSERT INTO `sys_role` VALUES (&apos;4&apos;, &apos;查看&apos;, &apos;可以查看所有的东西&apos;, &apos;126&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, &apos;126&apos;, &apos;1&apos;, &apos;2017-09-14 17:17:17&apos;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for `sys_user`</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_user`;</span><br><span class="line">CREATE TABLE `sys_user` (</span><br><span class="line">  `user_id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(50) DEFAULT NULL,</span><br><span class="line">  `nick_name` varchar(50) DEFAULT NULL,</span><br><span class="line">  `password` varchar(50) DEFAULT NULL,</span><br><span class="line">  `pic_path` varchar(200) DEFAULT &apos;/images/logo.png&apos;,</span><br><span class="line">  `status` enum(&apos;unlock&apos;,&apos;lock&apos;) DEFAULT &apos;unlock&apos;,</span><br><span class="line">  `create_time` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`user_id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_user</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_user` VALUES (&apos;1&apos;, &apos;admin&apos;, &apos;管理员&apos;, &apos;d033e22ae348aeb5660fc2140aec35850c4da997&apos;, &apos;http://www.lrshuai.top/upload/user/20170612/05976238.png&apos;, &apos;unlock&apos;, &apos;2017-08-18 13:57:32&apos;);</span><br><span class="line">INSERT INTO `sys_user` VALUES (&apos;2&apos;, &apos;tyro&apos;, &apos;tyro&apos;, &apos;481c63e8b904bb8399f1fc1dfdb77cb40842eb6f&apos;, &apos;/upload/show/user/82197046.png&apos;, &apos;unlock&apos;, &apos;2017-09-12 14:03:39&apos;);</span><br><span class="line">INSERT INTO `sys_user` VALUES (&apos;3&apos;, &apos;asdf&apos;, &apos;asdf&apos;, &apos;3da541559918a808c2402bba5012f6c60b27661c&apos;, &apos;/upload/show/user/85610497.png&apos;, &apos;unlock&apos;, &apos;2017-09-13 14:49:10&apos;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for `sys_user_role`</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `sys_user_role`;</span><br><span class="line">CREATE TABLE `sys_user_role` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` int(11) DEFAULT NULL,</span><br><span class="line">  `role_id` int(11) DEFAULT NULL,</span><br><span class="line">  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_user_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `sys_user_role` VALUES (&apos;1&apos;, &apos;1&apos;, &apos;1&apos;, &apos;2017-08-18 14:45:43&apos;);</span><br><span class="line">INSERT INTO `sys_user_role` VALUES (&apos;2&apos;, &apos;2&apos;, &apos;3&apos;, &apos;2017-09-08 17:12:58&apos;);</span><br><span class="line">INSERT INTO `sys_user_role` VALUES (&apos;13&apos;, &apos;3&apos;, &apos;3&apos;, &apos;2017-09-14 14:30:02&apos;);</span><br></pre></td></tr></table></figure><h2 id="三、生成新的mysql镜像"><a href="#三、生成新的mysql镜像" class="headerlink" title="三、生成新的mysql镜像"></a>三、生成新的mysql镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t adminmysql .</span><br></pre></td></tr></table></figure><h2 id="四、启动"><a href="#四、启动" class="headerlink" title="四、启动"></a>四、启动</h2><h4 id="现在启动是可以的，但是呢有一个问题，因为mysql的编码默认是瑞典latin1，我们要把改成utf8-或者utfmb4"><a href="#现在启动是可以的，但是呢有一个问题，因为mysql的编码默认是瑞典latin1，我们要把改成utf8-或者utfmb4" class="headerlink" title="现在启动是可以的，但是呢有一个问题，因为mysql的编码默认是瑞典latin1，我们要把改成utf8 或者utfmb4"></a>现在启动是可以的，但是呢有一个问题，因为mysql的编码默认是瑞典latin1，我们要把改成utf8 或者utfmb4</h4><h4 id="my-cnf"><a href="#my-cnf" class="headerlink" title="my.cnf"></a>my.cnf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character_set_server=utf8mb4</span><br><span class="line">init_connect=&apos;SET NAMES utf8&apos;</span><br><span class="line">wait_timeout=1814400</span><br><span class="line">interactive_timeout=604800</span><br><span class="line"></span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure><h5 id="上面的配置就和mysql-的配置是一样的，可以按照你的需求来配，下面就是启动容器的命令"><a href="#上面的配置就和mysql-的配置是一样的，可以按照你的需求来配，下面就是启动容器的命令" class="headerlink" title="上面的配置就和mysql 的配置是一样的，可以按照你的需求来配，下面就是启动容器的命令"></a>上面的配置就和mysql 的配置是一样的，可以按照你的需求来配，下面就是启动容器的命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 默认密码： root,我们要挂载一个my.cnf 的配置文件</span><br><span class="line">docker run --name admin_db -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -v /root/docker-mysql/my.cnf:/etc/mysql/my.cnf adminmysql</span><br></pre></td></tr></table></figure><h3 id="查看容器数据库是否有数据"><a href="#查看容器数据库是否有数据" class="headerlink" title="查看容器数据库是否有数据"></a>查看容器数据库是否有数据</h3><p><img src="/blog/2018/01/18/Docker（六）、启动mysql时自动执行脚本/52346.png" alt=""></p><h4 id="不错是有数据的。"><a href="#不错是有数据的。" class="headerlink" title="不错是有数据的。"></a>不错是有数据的。</h4><p>我的命令过程<br><img src="/blog/2018/01/18/Docker（六）、启动mysql时自动执行脚本/29401.png" alt=""></p><h2 id="搞定收工"><a href="#搞定收工" class="headerlink" title="搞定收工"></a>搞定收工</h2><h2 id="参考链接：https-blog-csdn-net-boling-cavalry-article-details-71055159"><a href="#参考链接：https-blog-csdn-net-boling-cavalry-article-details-71055159" class="headerlink" title="参考链接：https://blog.csdn.net/boling_cavalry/article/details/71055159"></a>参考链接：<a href="https://blog.csdn.net/boling_cavalry/article/details/71055159" target="_blank" rel="noopener">https://blog.csdn.net/boling_cavalry/article/details/71055159</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker-启动mysql时自动执行脚本&quot;&gt;&lt;a href=&quot;#docker-启动mysql时自动执行脚本&quot; class=&quot;headerlink&quot; title=&quot;docker 启动mysql时自动执行脚本&quot;&gt;&lt;/a&gt;docker 启动mysql时自动执行脚本&lt;/
      
    
    </summary>
    
      <category term="开发工具" scheme="https://rstyro.github.io/blog/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Docker" scheme="https://rstyro.github.io/blog/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker（五）、制作自己的Docker 镜像</title>
    <link href="https://rstyro.github.io/blog/2018/01/18/Docker%EF%BC%88%E4%BA%94%EF%BC%89%E3%80%81%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84Docker%20%E9%95%9C%E5%83%8F/"/>
    <id>https://rstyro.github.io/blog/2018/01/18/Docker（五）、制作自己的Docker 镜像/</id>
    <published>2018-01-18T08:10:37.000Z</published>
    <updated>2019-01-13T04:10:18.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="制作自己的Docker-镜像"><a href="#制作自己的Docker-镜像" class="headerlink" title="制作自己的Docker 镜像"></a>制作自己的Docker 镜像</h1><h4 id="Docker-可以通过-Dockerfile-的内容来自动构建镜像。Dockerfile-是一个包含创建镜像所有命令的文本文件，通过docker-build命令可以根据-Dockerfile-的内容构建镜像"><a href="#Docker-可以通过-Dockerfile-的内容来自动构建镜像。Dockerfile-是一个包含创建镜像所有命令的文本文件，通过docker-build命令可以根据-Dockerfile-的内容构建镜像" class="headerlink" title="Docker 可以通过 Dockerfile 的内容来自动构建镜像。Dockerfile 是一个包含创建镜像所有命令的文本文件，通过docker build命令可以根据 Dockerfile 的内容构建镜像"></a>Docker 可以通过 Dockerfile 的内容来自动构建镜像。Dockerfile 是一个包含创建镜像所有命令的文本文件，通过docker build命令可以根据 Dockerfile 的内容构建镜像</h4><h2 id="目标：在-tomcat中-运行一个-war-文件"><a href="#目标：在-tomcat中-运行一个-war-文件" class="headerlink" title="目标：在 tomcat中 运行一个.war 文件"></a>目标：在 tomcat中 运行一个.war 文件</h2><h2 id="一、创建一个Dockerfile-文件"><a href="#一、创建一个Dockerfile-文件" class="headerlink" title="一、创建一个Dockerfile 文件"></a>一、创建一个Dockerfile 文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 先创建一个文件夹为docker-admin</span><br><span class="line">mkdir docker-admin</span><br><span class="line"></span><br><span class="line"># 进入文件夹docker-admin 并创建一个Dockerfile</span><br><span class="line">cd docker-admin &amp;&amp; vim Dockerfile</span><br></pre></td></tr></table></figure><h2 id="二、编辑Dockerfile-文件"><a href="#二、编辑Dockerfile-文件" class="headerlink" title="二、编辑Dockerfile 文件"></a>二、编辑Dockerfile 文件</h2><p>编辑如下内容,下面中的<code>COPY admin.war</code> 的admin.war 就是我们的war文件<br>Dockerfile 的一些基本语法结构 后面再介绍<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM docker.io/tomcat</span><br><span class="line">MAINTAINER rstyro</span><br><span class="line">COPY admin.war /usr/local/tomcat/webapps</span><br></pre></td></tr></table></figure></p><h2 id="三、获取到-war-文件"><a href="#三、获取到-war-文件" class="headerlink" title="三、获取到.war 文件"></a>三、获取到.war 文件</h2><p>你可以用你自己的，或者用我的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># github 下载地址为：</span><br><span class="line">wget https://github.com/rstyro/admin/raw/pack/pack/admin-0.0.1-SNAPSHOT.war</span><br><span class="line"></span><br><span class="line"># 修改名字</span><br><span class="line">mv admin-0.0.1-SNAPSHOT.war admin.war</span><br></pre></td></tr></table></figure></p><h2 id="四、构建镜像"><a href="#四、构建镜像" class="headerlink" title="四、构建镜像"></a>四、构建镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -t 参数 后面跟镜像名字和tag  注意别忘了后面的 . 点表示当前路径</span><br><span class="line">docker build -t admin:1.0.0 .</span><br></pre></td></tr></table></figure><h2 id="五、运行我们刚构建的镜像"><a href="#五、运行我们刚构建的镜像" class="headerlink" title="五、运行我们刚构建的镜像"></a>五、运行我们刚构建的镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 给它取名 admin 本机端口映射 8080</span><br><span class="line">docker run --name=admin -p 8080:8080 -d admin:1.0.0</span><br></pre></td></tr></table></figure><h4 id="下面是我敲命令的过程"><a href="#下面是我敲命令的过程" class="headerlink" title="下面是我敲命令的过程"></a>下面是我敲命令的过程</h4><p><img src="/blog/2018/01/18/Docker（五）、制作自己的Docker 镜像/71806.png" alt=""><br><img src="/blog/2018/01/18/Docker（五）、制作自己的Docker 镜像/65971.png" alt=""></p><h2 id="六、Dockerfile-指令详解"><a href="#六、Dockerfile-指令详解" class="headerlink" title="六、Dockerfile 指令详解"></a>六、Dockerfile 指令详解</h2><ul><li>FROM</li><li>MAINTAINER</li><li>RUN</li><li>CMD</li><li>EXPOSE</li><li>ENV</li><li>ADD</li><li>COPY</li><li>ENTRYPOINT</li><li>VOLUME</li><li>USER</li><li>WORKDIR</li><li>ONBUILD</li></ul><h3 id="1、FROM"><a href="#1、FROM" class="headerlink" title="1、FROM"></a>1、FROM</h3><p>用法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;image&gt;</span><br></pre></td></tr></table></figure></p><ul><li>FROM指定构建镜像的基础源镜像，如果本地没有指定的镜像，则会自动从 Docker 的公共库 pull 镜像下来。</li><li>FROM必须是 Dockerfile 中非注释行的第一个指令，即一个 Dockerfile 从FROM语句开始。</li><li>FROM可以在一个 Dockerfile 中出现多次，如果有需求在一个 Dockerfile 中创建多个镜像。</li><li>如果FROM语句没有指定镜像标签，则默认使用latest标签。</li></ul><h3 id="2、MAINTAINER"><a href="#2、MAINTAINER" class="headerlink" title="2、MAINTAINER"></a>2、MAINTAINER</h3><p>用法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAINTAINER &lt;name&gt;</span><br></pre></td></tr></table></figure></p><p>指定创建镜像的用户</p><h3 id="3、RUN"><a href="#3、RUN" class="headerlink" title="3、RUN"></a>3、RUN</h3><p>RUN 有两种使用方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN &quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;</span><br></pre></td></tr></table></figure></p><ul><li>每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像，后续的RUN都在之前RUN提交后的镜像为基础，镜像是分层的，可以通过一个镜像的任何一个历史提交点来创建，类似源码的版本控制。</li><li>exec 方式会被解析为一个 JSON 数组，所以必须使用双引号而不是单引号。exec 方式不会调用一个命令 shell，所以也就不会继承相应的变量，如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN [ &quot;echo&quot;, &quot;$HOME&quot; ]</span><br></pre></td></tr></table></figure></li></ul><p>这种方式是不会达到输出 HOME 变量的，正确的方式应该是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo&quot;, &quot;$HOME&quot; ]</span><br></pre></td></tr></table></figure></p><p>RUN产生的缓存在下一次构建的时候是不会失效的，会被重用，可以使用–no-cache选项，即docker build –no-cache，如此便不会缓存。</p><h3 id="4、CMD"><a href="#4、CMD" class="headerlink" title="4、CMD"></a>4、CMD</h3><p>CMD有三种使用方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CMD &quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;</span><br><span class="line">CMD &quot;param1&quot;,&quot;param2&quot;</span><br><span class="line">CMD command param1 param2 (shell form)</span><br></pre></td></tr></table></figure></p><ul><li>CMD指定在 Dockerfile 中只能使用一次，如果有多个，则只有最后一个会生效。</li><li>CMD的目的是为了在启动容器时提供一个默认的命令执行选项。如果用户启动容器时指定了运行的命令，则会覆盖掉CMD指定的命令。</li></ul><blockquote><p>CMD会在启动容器的时候执行，build 时不执行，而RUN只是在构建镜像的时候执行，后续镜像构建完成之后，启动容器就与RUN无关了</p></blockquote><h3 id="5、EXPOSE"><a href="#5、EXPOSE" class="headerlink" title="5、EXPOSE"></a>5、EXPOSE</h3><p>格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;port&gt; [&lt;port&gt;...]</span><br></pre></td></tr></table></figure></p><p>告诉 Docker 服务端容器对外映射的本地端口，需要在 docker run 的时候使用-p或者-P选项生效。</p><h3 id="6、ENV"><a href="#6、ENV" class="headerlink" title="6、ENV"></a>6、ENV</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;       # 只能设置一个变量</span><br><span class="line">ENV &lt;key&gt;=&lt;value&gt; ...   # 允许一次设置多个变量</span><br></pre></td></tr></table></figure><p>指定一个环境变量，会被后续RUN指令使用，并在容器运行时保留。</p><p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV myName=&quot;John Doe&quot; myDog=Rex\ The\ Dog \</span><br><span class="line">    myCat=fluffy</span><br></pre></td></tr></table></figure></p><p>等同于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ENV myName John Doe</span><br><span class="line">ENV myDog Rex The Dog</span><br><span class="line">ENV myCat fluffy</span><br></pre></td></tr></table></figure></p><h3 id="7、ADD"><a href="#7、ADD" class="headerlink" title="7、ADD"></a>7、ADD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD &lt;src&gt;... &lt;dest&gt;</span><br></pre></td></tr></table></figure><p>ADD复制本地主机文件、目录或者远程文件 URLS 从 并且添加到容器指定路径中 。</p><p>支持通过 GO 的正则模糊匹配，具体规则可参见 Go filepath.Match</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ADD hom* /mydir/        # adds all files starting with &quot;hom&quot;</span><br><span class="line">ADD hom?.txt /mydir/    # ? is replaced with any single character</span><br></pre></td></tr></table></figure><ul><li>路径必须是绝对路径，如果 不存在，会自动创建对应目录</li><li>路径必须是 Dockerfile 所在路径的相对路径</li><li>如果是一个目录，只会复制目录下的内容，而目录本身则不会被复制</li></ul><h3 id="8、COPY"><a href="#8、COPY" class="headerlink" title="8、COPY"></a>8、COPY</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY &lt;src&gt;... &lt;dest&gt;</span><br></pre></td></tr></table></figure><ul><li>COPY复制新文件或者目录从 并且添加到容器指定路径中 。用法同ADD，唯一的不同是不能指定远程文件 URLS。</li></ul><h3 id="9、ENTRYPOINT"><a href="#9、ENTRYPOINT" class="headerlink" title="9、ENTRYPOINT"></a>9、ENTRYPOINT</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT &quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;</span><br><span class="line">ENTRYPOINT command param1 param2 (shell form)</span><br></pre></td></tr></table></figure><p>配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖，而CMD是可以被覆盖的。如果需要覆盖，则可以使用<code>docker run --entrypoint</code>选项。<br>每个 Dockerfile 中只能有一个ENTRYPOINT，当指定多个时，只有最后一个生效。</p><h5 id="Exec-form-ENTRYPOINT-例子"><a href="#Exec-form-ENTRYPOINT-例子" class="headerlink" title="Exec form ENTRYPOINT 例子"></a>Exec form ENTRYPOINT 例子</h5><ul><li><p>通过ENTRYPOINT使用 exec form 方式设置稳定的默认命令和选项，而使用CMD添加默认之外经常被改动的选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">ENTRYPOINT [&quot;top&quot;, &quot;-b&quot;]</span><br><span class="line">CMD [&quot;-c&quot;]</span><br></pre></td></tr></table></figure></li><li><p>通过 Dockerfile 使用ENTRYPOINT展示前台运行 Apache 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM debian:stable</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y --force-yes apache2</span><br><span class="line">EXPOSE 80 443</span><br><span class="line">VOLUME [&quot;/var/www&quot;, &quot;/var/log/apache2&quot;, &quot;/etc/apache2&quot;]</span><br><span class="line">ENTRYPOINT [&quot;/usr/sbin/apache2ctl&quot;, &quot;-D&quot;, &quot;FOREGROUND&quot;]</span><br></pre></td></tr></table></figure></li></ul><h5 id="Shell-form-ENTRYPOINT-例子"><a href="#Shell-form-ENTRYPOINT-例子" class="headerlink" title="Shell form ENTRYPOINT 例子"></a>Shell form ENTRYPOINT 例子</h5><ul><li>这种方式会在/bin/sh -c中执行，会忽略任何CMD或者docker run命令行选项，为了确保docker stop能够停止长时间运行ENTRYPOINT的容器，确保执行的时候使用exec选项。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">ENTRYPOINT exec top -b</span><br></pre></td></tr></table></figure></li></ul><p>如果在ENTRYPOINT忘记使用exec选项，则可以使用CMD补上:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">ENTRYPOINT top -b</span><br><span class="line">CMD --ignored-param1 # --ignored-param2 ... --ignored-param3 ... 依此类推</span><br></pre></td></tr></table></figure></p><h3 id="10、VOLUME"><a href="#10、VOLUME" class="headerlink" title="10、VOLUME"></a>10、VOLUME</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [&quot;/data&quot;]</span><br></pre></td></tr></table></figure><p>将本地主机目录挂载到目标容器中<br>或者将其他容器挂载的挂载点 挂载到目标容器中</p><h3 id="11、USER"><a href="#11、USER" class="headerlink" title="11、USER"></a>11、USER</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER daemon</span><br></pre></td></tr></table></figure><p>指定运行容器时的用户名或 UID，后续的RUN、CMD、ENTRYPOINT也会使用指定用户。</p><h3 id="11、WORKDIR"><a href="#11、WORKDIR" class="headerlink" title="11、WORKDIR"></a>11、WORKDIR</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /path/to/workdir</span><br></pre></td></tr></table></figure><p>为后续的RUN、CMD、ENTRYPOINT指令配置工作目录。可以使用多个WORKDIR指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR c</span><br><span class="line">RUN pwd</span><br></pre></td></tr></table></figure></p><p>最终路径是/a/b/c。</p><p>WORKDIR指令可以在ENV设置变量之后调用环境变量:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV DIRPATH /path</span><br><span class="line">WORKDIR $DIRPATH/$DIRNAME</span><br></pre></td></tr></table></figure></p><p>最终路径则为 /path/$DIRNAME。</p><h3 id="12、ONBUILD"><a href="#12、ONBUILD" class="headerlink" title="12、ONBUILD"></a>12、ONBUILD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ONBUILD [INSTRUCTION]</span><br></pre></td></tr></table></figure><p>使用该dockerfile生成的镜像A，并不执行ONBUILD中命令<br>如再来个dockerfile 基础镜像为镜像A时，生成的镜像B时就会执行ONBUILD中的命令</p><h3 id="参考链接：http-www-open-open-com-lib-view-open1423703640748-html"><a href="#参考链接：http-www-open-open-com-lib-view-open1423703640748-html" class="headerlink" title="参考链接：http://www.open-open.com/lib/view/open1423703640748.html"></a>参考链接：<a href="http://www.open-open.com/lib/view/open1423703640748.html" target="_blank" rel="noopener">http://www.open-open.com/lib/view/open1423703640748.html</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;制作自己的Docker-镜像&quot;&gt;&lt;a href=&quot;#制作自己的Docker-镜像&quot; class=&quot;headerlink&quot; title=&quot;制作自己的Docker 镜像&quot;&gt;&lt;/a&gt;制作自己的Docker 镜像&lt;/h1&gt;&lt;h4 id=&quot;Docker-可以通过-Docke
      
    
    </summary>
    
      <category term="开发工具" scheme="https://rstyro.github.io/blog/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Docker" scheme="https://rstyro.github.io/blog/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker（四）、运行Nginx</title>
    <link href="https://rstyro.github.io/blog/2018/01/13/Docker%EF%BC%88%E5%9B%9B%EF%BC%89%E3%80%81%E8%BF%90%E8%A1%8CNginx/"/>
    <id>https://rstyro.github.io/blog/2018/01/13/Docker（四）、运行Nginx/</id>
    <published>2018-01-13T07:53:00.000Z</published>
    <updated>2019-01-12T14:49:02.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-运行nginx"><a href="#Docker-运行nginx" class="headerlink" title="Docker 运行nginx"></a>Docker 运行nginx</h1><p>运行了hello world 还不是我们的目标，这章我们要来学习运行一个静态的页面</p><h2 id="一、获取Nginx"><a href="#一、获取Nginx" class="headerlink" title="一、获取Nginx"></a>一、获取Nginx</h2><h5 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h2 id="二、启动镜像"><a href="#二、启动镜像" class="headerlink" title="二、启动镜像"></a>二、启动镜像</h2><h4 id="方法一：指定端口映射"><a href="#方法一：指定端口映射" class="headerlink" title="方法一：指定端口映射"></a>方法一：指定端口映射</h4><h5 id="本机80端口-映射-容器的80端口-d-是后台运行的意思，"><a href="#本机80端口-映射-容器的80端口-d-是后台运行的意思，" class="headerlink" title="本机80端口 映射 容器的80端口,-d 是后台运行的意思，"></a>本机80端口 映射 容器的80端口,-d 是后台运行的意思，</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># --name 是给它指定一个名字，我们这里给它指定的名字叫mynginx(不指定时docker会随机给它起一个名字)</span><br><span class="line">docker run -d --name mynginx -p 80:80 nginx</span><br></pre></td></tr></table></figure><h4 id="方法二：随机端口映射"><a href="#方法二：随机端口映射" class="headerlink" title="方法二：随机端口映射"></a>方法二：随机端口映射</h4><h5 id="本机随机指定一个端口映射容器的nginx-启动端口-d-是后台运行的意思"><a href="#本机随机指定一个端口映射容器的nginx-启动端口-d-是后台运行的意思" class="headerlink" title="本机随机指定一个端口映射容器的nginx 启动端口,-d 是后台运行的意思"></a>本机随机指定一个端口映射容器的nginx 启动端口,-d 是后台运行的意思</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mynginx -P 80:80 nginx</span><br></pre></td></tr></table></figure><h2 id="三、浏览器访问"><a href="#三、浏览器访问" class="headerlink" title="三、浏览器访问"></a>三、浏览器访问</h2><h4 id="nginx-默认启动的端口为-80"><a href="#nginx-默认启动的端口为-80" class="headerlink" title="nginx 默认启动的端口为 80"></a>nginx 默认启动的端口为 80</h4><h4 id="通过命令docker-ps-或者-docker-ps-grep-nginx，查看端口的映射情况"><a href="#通过命令docker-ps-或者-docker-ps-grep-nginx，查看端口的映射情况" class="headerlink" title="通过命令docker ps 或者 docker ps | grep nginx，查看端口的映射情况"></a>通过命令<code>docker ps</code> 或者 <code>docker ps | grep nginx</code>，查看端口的映射情况</h4><h4 id="浏览器访问：http-localhost-或者-curl-http-localhost"><a href="#浏览器访问：http-localhost-或者-curl-http-localhost" class="headerlink" title="浏览器访问：http://localhost/ 或者 curl http://localhost/"></a>浏览器访问：<a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a> 或者 curl <a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a></h4><p><img src="/blog/2018/01/13/Docker（四）、运行Nginx/13248.png" alt=""></p><h2 id="四、修改index-html-页面"><a href="#四、修改index-html-页面" class="headerlink" title="四、修改index.html 页面"></a>四、修改index.html 页面</h2><h3 id="方法一：进入容器内部修改index-html-页面"><a href="#方法一：进入容器内部修改index-html-页面" class="headerlink" title="方法一：进入容器内部修改index.html 页面"></a>方法一：进入容器内部修改index.html 页面</h3><h5 id="这就需要我们学新的一个命令docker-exec了。格式如下："><a href="#这就需要我们学新的一个命令docker-exec了。格式如下：" class="headerlink" title="这就需要我们学新的一个命令docker exec了。格式如下："></a>这就需要我们学新的一个命令<code>docker exec</code>了。格式如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 参数-i是与用户交互式 -t 可以理解为一个伪终端，具体的可以通过 docker exec --help 命令来查看exec 的参数详解</span><br><span class="line">docker exec -it mynginx bash</span><br></pre></td></tr></table></figure><p>运行上面的命令之后我们就进到了运行nginx 容器里了，我们要修改的index页面的路径为<code>/usr/share/nginx/html/index.html</code><br>当我们想使用vim 对它进行修改的时候，发现没有vim 这个命令。所以我们需要安装vim,运行如下命令（测试可以这么干）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 更新源，然后安装vim,然后就可以编辑了。</span><br><span class="line">apt-get update &amp;&amp; apt-get install -y vim</span><br></pre></td></tr></table></figure></p><p>接下来就可以修改了，想退出容器只需要运行<code>exit</code> 命令即可</p><h3 id="方法二：映射页面目录（推荐）"><a href="#方法二：映射页面目录（推荐）" class="headerlink" title="方法二：映射页面目录（推荐）"></a>方法二：映射页面目录（推荐）</h3><h5 id="1、首先我们新建一个目录，并进入该目录，建立一个html的子目录"><a href="#1、首先我们新建一个目录，并进入该目录，建立一个html的子目录" class="headerlink" title="1、首先我们新建一个目录，并进入该目录，建立一个html的子目录"></a>1、首先我们新建一个目录，并进入该目录，建立一个html的子目录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># -p 是递归创建</span><br><span class="line">mkdir -p docker-nginx/html</span><br><span class="line">cd docker-nginx</span><br></pre></td></tr></table></figure><h5 id="2、在html目录下创建一个index-html页面"><a href="#2、在html目录下创建一个index-html页面" class="headerlink" title="2、在html目录下创建一个index.html页面"></a>2、在html目录下创建一个index.html页面</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim html/index.html</span><br><span class="line"></span><br><span class="line"># 编辑内容如下：</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;title&gt;Hello Docker&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Hello Docker!!!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="3、运行容器"><a href="#3、运行容器" class="headerlink" title="3、运行容器"></a>3、运行容器</h5><p>在运行容器之前我们要把刚刚运行的容器停止掉，以为我们需要用80来启动它（如果你不要80端口，可以不用停止它）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 停止刚才运行的容器，mynginx 就是我们刚才命名的</span><br><span class="line">docker stop mynginx</span><br><span class="line"></span><br><span class="line"># 这里是把这个容器删除掉，也可以不删掉，但是下面我下面又使用了mynginx,</span><br><span class="line">docker rm mynginx</span><br><span class="line"></span><br><span class="line"># 启动本地映射html 页面的容器</span><br><span class="line">docker run -d -p 80:80 --name mynginx -v &quot;$PWD/html&quot;:/usr/share/nginx/html docker.io/nginx</span><br></pre></td></tr></table></figure></p><p>打开浏览器，访问 <a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a>，应该就能看到 Hello Docker!!! 了<br>我们可以在我们的主机上修改 index.html 的内容，然后刷新浏览器，看是否浏览器也更新了。<br><img src="/blog/2018/01/13/Docker（四）、运行Nginx/47063.png" alt=""></p><h2 id="五、挂载配置文件"><a href="#五、挂载配置文件" class="headerlink" title="五、挂载配置文件"></a>五、挂载配置文件</h2><h4 id="1、拷贝nginx容器的配置文件"><a href="#1、拷贝nginx容器的配置文件" class="headerlink" title="1、拷贝nginx容器的配置文件"></a>1、拷贝nginx容器的配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 别忘了后面有一个 `.`  这个点表示当前目录</span><br><span class="line">docker cp mynginx:/etc/nginx .</span><br></pre></td></tr></table></figure><h4 id="2、改名"><a href="#2、改名" class="headerlink" title="2、改名"></a>2、改名</h4><p>执行完成后，当前目录应该多出一个nginx子目录。然后，把这个子目录改名为conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv nginx conf</span><br></pre></td></tr></table></figure></p><h4 id="3、停止我们刚才运行的容器"><a href="#3、停止我们刚才运行的容器" class="headerlink" title="3、停止我们刚才运行的容器"></a>3、停止我们刚才运行的容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop mynginx</span><br></pre></td></tr></table></figure><h4 id="4、重新启动"><a href="#4、重新启动" class="headerlink" title="4、重新启动"></a>4、重新启动</h4><p>我们的容器名字这里得改一下 mynginx 刚才我们已经用了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mynginx2 -v &quot;$PWD/html&quot;:/usr/share/nginx/html -v &quot;$PWD/conf&quot;:/etc/nginx -p 80:80 docker.io/nginx</span><br></pre></td></tr></table></figure></p><h4 id="5、修改配置"><a href="#5、修改配置" class="headerlink" title="5、修改配置"></a>5、修改配置</h4><p>只需要修改 <code>conf/conf.d/default.conf</code>文件即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-运行nginx&quot;&gt;&lt;a href=&quot;#Docker-运行nginx&quot; class=&quot;headerlink&quot; title=&quot;Docker 运行nginx&quot;&gt;&lt;/a&gt;Docker 运行nginx&lt;/h1&gt;&lt;p&gt;运行了hello world 还不是我们的目
      
    
    </summary>
    
      <category term="开发工具" scheme="https://rstyro.github.io/blog/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Docker" scheme="https://rstyro.github.io/blog/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Js 点击复制文本内容</title>
    <link href="https://rstyro.github.io/blog/2018/01/13/Js%20%E7%82%B9%E5%87%BB%E5%A4%8D%E5%88%B6%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9/"/>
    <id>https://rstyro.github.io/blog/2018/01/13/Js 点击复制文本内容/</id>
    <published>2018-01-13T07:13:38.000Z</published>
    <updated>2019-01-12T14:49:02.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Js-点击复制文本内容"><a href="#Js-点击复制文本内容" class="headerlink" title="Js 点击复制文本内容"></a>Js 点击复制文本内容</h1><h2 id="一、利用第三方插件-clipboard-js"><a href="#一、利用第三方插件-clipboard-js" class="headerlink" title="一、利用第三方插件 clipboard.js"></a>一、利用第三方插件 clipboard.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;textarea id=&quot;target&quot;&gt;复制我里面的内容&lt;/textarea&gt;&lt;/br&gt;</span><br><span class="line">&lt;button class=&quot;btn&quot; id=&quot;myb&quot;  data-clipboard-action=&quot;copy&quot; data-clipboard-target=&quot;#target&quot;&gt;</span><br><span class="line">点我复制</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;script src=&quot;clipboard.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">var clipboard=new Clipboard(&apos;#myb&apos;);</span><br><span class="line">clipboard.on(&apos;success&apos;,function(e) &#123;</span><br><span class="line">console.log(&quot;success&quot;,&quot;内容已经复制到剪切板啦&quot;);</span><br><span class="line">console.info(&apos;Action:&apos;, e.action);</span><br><span class="line">console.info(&apos;Text:&apos;, e.text);</span><br><span class="line">console.info(&apos;Trigger:&apos;, e.trigger);</span><br><span class="line">//e.clearSelection();</span><br><span class="line">&#125;);</span><br><span class="line">clipboard.off(&apos;success&apos;,function(e) &#123;</span><br><span class="line">console.log(&quot;success&quot;,&quot;内容已经复制到剪切板啦&quot;);</span><br><span class="line">console.info(&apos;Action:&apos;, e.action);</span><br><span class="line">console.info(&apos;Text:&apos;, e.text);</span><br><span class="line">console.info(&apos;Trigger:&apos;, e.trigger);</span><br><span class="line">//e.clearSelection();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>详细用法：<a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="noopener">https://github.com/zenorocha/clipboard.js</a></p><h2 id="二、execCommand"><a href="#二、execCommand" class="headerlink" title="二、execCommand"></a>二、execCommand</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;点击复制后在右边textarea CTRL+V看一下&lt;/p&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;inputText&quot; value=&quot;这里是复制的文本内容！！！！&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;复制&quot;/&gt;</span><br><span class="line">&lt;textarea rows=&quot;4&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line"> window.onload = function () &#123;</span><br><span class="line">var btn = document.getElementById(&apos;btn&apos;);</span><br><span class="line">btn.addEventListener(&apos;click&apos;, function()&#123;</span><br><span class="line">var inputText = document.getElementById(&apos;inputText&apos;);</span><br><span class="line">inputText.focus();</span><br><span class="line">inputText.setSelectionRange(0, inputText.value.length);</span><br><span class="line"> document.execCommand(&apos;copy&apos;, true);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="感觉介绍两种差不多了，第一种比较方便。一般第一种就够用了"><a href="#感觉介绍两种差不多了，第一种比较方便。一般第一种就够用了" class="headerlink" title="感觉介绍两种差不多了，第一种比较方便。一般第一种就够用了"></a>感觉介绍两种差不多了，第一种比较方便。一般第一种就够用了</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Js-点击复制文本内容&quot;&gt;&lt;a href=&quot;#Js-点击复制文本内容&quot; class=&quot;headerlink&quot; title=&quot;Js 点击复制文本内容&quot;&gt;&lt;/a&gt;Js 点击复制文本内容&lt;/h1&gt;&lt;h2 id=&quot;一、利用第三方插件-clipboard-js&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Java" scheme="https://rstyro.github.io/blog/categories/Java/"/>
    
    
      <category term="JavaScript" scheme="https://rstyro.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 查询报错QueryPhaseExecutionException Result window is too large....</title>
    <link href="https://rstyro.github.io/blog/2018/01/13/ElasticSearch%20%E6%9F%A5%E8%AF%A2%E6%8A%A5%E9%94%99QueryPhaseExecutionException%20Result%20window%20is%20too%20large..../"/>
    <id>https://rstyro.github.io/blog/2018/01/13/ElasticSearch 查询报错QueryPhaseExecutionException Result window is too large..../</id>
    <published>2018-01-13T06:34:22.000Z</published>
    <updated>2019-01-13T05:48:50.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES-报错"><a href="#ES-报错" class="headerlink" title="ES 报错"></a>ES 报错</h1><h2 id="一、QueryPhaseExecutionException"><a href="#一、QueryPhaseExecutionException" class="headerlink" title="一、QueryPhaseExecutionException"></a>一、QueryPhaseExecutionException</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nested: QueryPhaseExecutionException[Result window is too large, from + size must be less than or equal to: [10000] but was [10010].</span><br><span class="line"> See the scroll api for a more efficient way to request large data sets. This limit can be set by changing the [index.max_result_window] index level setting.]; &#125;</span><br></pre></td></tr></table></figure><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># indexName 改为你的索引名称</span><br><span class="line">curl -XPUT http://127.0.0.1:9200/indexName/_settings -d &apos;&#123; &quot;index&quot; : &#123; &quot;max_result_window&quot; : 100000000&#125;&#125;&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES-报错&quot;&gt;&lt;a href=&quot;#ES-报错&quot; class=&quot;headerlink&quot; title=&quot;ES 报错&quot;&gt;&lt;/a&gt;ES 报错&lt;/h1&gt;&lt;h2 id=&quot;一、QueryPhaseExecutionException&quot;&gt;&lt;a href=&quot;#一、QueryPhas
      
    
    </summary>
    
      <category term="搜索引擎" scheme="https://rstyro.github.io/blog/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="ElasticSearch" scheme="https://rstyro.github.io/blog/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Docker（三）、运行一个 Hello World</title>
    <link href="https://rstyro.github.io/blog/2018/01/12/Docker%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%81%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%20Hello%20World/"/>
    <id>https://rstyro.github.io/blog/2018/01/12/Docker（三）、运行一个 Hello World/</id>
    <published>2018-01-12T07:52:56.000Z</published>
    <updated>2019-01-12T14:49:02.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-初体验"><a href="#Docker-初体验" class="headerlink" title="Docker 初体验"></a>Docker 初体验</h1><h3 id="前面看了那么多文字，可能还是不知道docker-怎么用。学编程少不了hello-world-所以，我们就来试一个helloworld"><a href="#前面看了那么多文字，可能还是不知道docker-怎么用。学编程少不了hello-world-所以，我们就来试一个helloworld" class="headerlink" title="前面看了那么多文字，可能还是不知道docker 怎么用。学编程少不了hello world,所以，我们就来试一个helloworld"></a>前面看了那么多文字，可能还是不知道docker 怎么用。学编程少不了hello world,所以，我们就来试一个helloworld</h3><h2 id="一、简单命令"><a href="#一、简单命令" class="headerlink" title="一、简单命令"></a>一、简单命令</h2><table><thead><tr><th>命令</th><th>详解</th></tr></thead><tbody><tr><td>docker search</td><td>搜索images</td></tr><tr><td>docker pull</td><td>获取images</td></tr><tr><td>docker run</td><td>运行images</td></tr><tr><td>docker ps</td><td>查看后台运行的容器</td></tr><tr><td>docker build</td><td>构建images</td></tr><tr><td>docker images</td><td>列出images</td></tr><tr><td>docker rm</td><td>删除container</td></tr><tr><td>docker rmi</td><td>删除images</td></tr><tr><td>docker cp</td><td>在host和container之间拷贝文件</td></tr><tr><td>docker commit</td><td>保存改动为新的images</td></tr></tbody></table><h2 id="二、下载并运行一个hello-world"><a href="#二、下载并运行一个hello-world" class="headerlink" title="二、下载并运行一个hello-world"></a>二、下载并运行一个hello-world</h2><h4 id="docker-官方给出了一个hello-world-我们运行它就可以了，可以通过搜索命令进行搜索"><a href="#docker-官方给出了一个hello-world-我们运行它就可以了，可以通过搜索命令进行搜索" class="headerlink" title="docker 官方给出了一个hello-world 我们运行它就可以了，可以通过搜索命令进行搜索"></a>docker 官方给出了一个hello-world 我们运行它就可以了，可以通过搜索命令进行搜索</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 搜索</span><br><span class="line">docker search hello-world</span><br><span class="line"></span><br><span class="line"># 下载下来</span><br><span class="line">docker pull hello-world</span><br><span class="line"></span><br><span class="line"># 运行 hello-world</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="/blog/2018/01/12/Docker（三）、运行一个 Hello World/16847.png" alt=""></p><p><img src="/blog/2018/01/12/Docker（三）、运行一个 Hello World/32948.png" alt=""></p><h4 id="看到上面打印出来的信息，表示我们的hello-world-已经成功运行了。"><a href="#看到上面打印出来的信息，表示我们的hello-world-已经成功运行了。" class="headerlink" title="看到上面打印出来的信息，表示我们的hello world 已经成功运行了。"></a>看到上面打印出来的信息，表示我们的hello world 已经成功运行了。</h4><h3 id="2、我们在试一个例子"><a href="#2、我们在试一个例子" class="headerlink" title="2、我们在试一个例子"></a>2、我们在试一个例子</h3><h4 id="busyBox是一个最小的Linux系统，它提供了该系统的主要功能，不包含一些与GNU相关的功能和选项"><a href="#busyBox是一个最小的Linux系统，它提供了该系统的主要功能，不包含一些与GNU相关的功能和选项" class="headerlink" title="busyBox是一个最小的Linux系统，它提供了该系统的主要功能，不包含一些与GNU相关的功能和选项"></a>busyBox是一个最小的Linux系统，它提供了该系统的主要功能，不包含一些与GNU相关的功能和选项</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 下载</span><br><span class="line">docker pull docker.io/busybox</span><br><span class="line"></span><br><span class="line">## 运行</span><br><span class="line">docker run busybox /bin/echo Hello Docker</span><br></pre></td></tr></table></figure><h4 id="因为上面一运行完，容器就退出了，我们试试让busybox-在后台运行"><a href="#因为上面一运行完，容器就退出了，我们试试让busybox-在后台运行" class="headerlink" title="因为上面一运行完，容器就退出了，我们试试让busybox 在后台运行"></a>因为上面一运行完，容器就退出了，我们试试让busybox 在后台运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps_job=$(docker run -d busybox /bin/sh -c &quot;while true; do echo Hello Docker; sleep 1; done&quot;)</span><br></pre></td></tr></table></figure><h4 id="ps-job-这个就是这个容器的ID-，我们可以打印看看"><a href="#ps-job-这个就是这个容器的ID-，我们可以打印看看" class="headerlink" title="$ps_job 这个就是这个容器的ID ，我们可以打印看看"></a>$ps_job 这个就是这个容器的ID ，我们可以打印看看</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $ps_job</span><br></pre></td></tr></table></figure><h3 id="查看后台运行的容器"><a href="#查看后台运行的容器" class="headerlink" title="查看后台运行的容器"></a>查看后台运行的容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs $ps_job</span><br></pre></td></tr></table></figure><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop $ps_job</span><br><span class="line"></span><br><span class="line"># 快速停止容器，比较暴力的做法</span><br><span class="line">docker kill $ps_job</span><br></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start $ps_job</span><br></pre></td></tr></table></figure><h3 id="重新启动容器"><a href="#重新启动容器" class="headerlink" title="重新启动容器"></a>重新启动容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart $ps_job</span><br></pre></td></tr></table></figure><h3 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="删除指定容器"><a href="#删除指定容器" class="headerlink" title="删除指定容器"></a>删除指定容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $ps_job</span><br></pre></td></tr></table></figure><h3 id="删除所有容器"><a href="#删除所有容器" class="headerlink" title="删除所有容器"></a>删除所有容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -q 这个参数是只显示PID </span><br><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><h3 id="查看镜像的历史版本"><a href="#查看镜像的历史版本" class="headerlink" title="查看镜像的历史版本"></a>查看镜像的历史版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history (image_name)</span><br></pre></td></tr></table></figure><h3 id="将镜像推送到registry"><a href="#将镜像推送到registry" class="headerlink" title="将镜像推送到registry"></a>将镜像推送到registry</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 提示输入用户名密码即可</span><br><span class="line">docker push (image_name)</span><br></pre></td></tr></table></figure><p><img src="/blog/2018/01/12/Docker（三）、运行一个 Hello World/96832.png" alt=""></p><h2 id="三、可能报的错"><a href="#三、可能报的错" class="headerlink" title="三、可能报的错"></a>三、可能报的错</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error pulling image configuration: Get https://dseasb33srnrn.cloudfront.net/registry-v2/docker/registry/v2/blobs/sha256/e3/e38bc07ac18ee64e6d59cf2eafcdddf9cec2364dfe129fe0af75f1b0194e0c96/data?Expires=1523560885&amp;Signature=K7PnkaObjZRxEQxHwJJu6rUL~jUJDhsL8H~r33DQngwMObZz2ybaG0~ArA4ybO0qcLi6KCOS9QUzihJgLAZFs33QmHRS4Bq~rd60RmSg5vlOwe7o0demgKTETGZuNs0q6IGlhiHRmuQfIddmEPnkuocO0YsXIL1AFYyWrwlkR~E_&amp;Key-Pair-Id=APKAJECH5M7VWIS5YZ6Q: net/http: TLS handshake timeout</span><br></pre></td></tr></table></figure><h4 id="这是因为docker默认镜像拉取地址为国外仓库下载速度较慢，则会报错“net-http-TLS-handshake-timeout”。此时，只需要将拉取地址改为国内镜像仓库即可。"><a href="#这是因为docker默认镜像拉取地址为国外仓库下载速度较慢，则会报错“net-http-TLS-handshake-timeout”。此时，只需要将拉取地址改为国内镜像仓库即可。" class="headerlink" title="这是因为docker默认镜像拉取地址为国外仓库下载速度较慢，则会报错“net/http: TLS handshake timeout”。此时，只需要将拉取地址改为国内镜像仓库即可。"></a>这是因为docker默认镜像拉取地址为国外仓库下载速度较慢，则会报错“net/http: TLS handshake timeout”。此时，只需要将拉取地址改为国内镜像仓库即可。</h4><h4 id="解决方案：修改-etc-docker-daemon-json-文件并添加上-registry-mirrors-键值"><a href="#解决方案：修改-etc-docker-daemon-json-文件并添加上-registry-mirrors-键值" class="headerlink" title="解决方案：修改 /etc/docker/daemon.json 文件并添加上 registry-mirrors 键值"></a>解决方案：修改 /etc/docker/daemon.json 文件并添加上 registry-mirrors 键值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>添加下面的内容，可以加多个镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="四、Docker-运行的流程图"><a href="#四、Docker-运行的流程图" class="headerlink" title="四、Docker 运行的流程图"></a>四、Docker 运行的流程图</h2><p><img src="/blog/2018/01/12/Docker（三）、运行一个 Hello World/59310.png" alt=""><br><img src="/blog/2018/01/12/Docker（三）、运行一个 Hello World/71930.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-初体验&quot;&gt;&lt;a href=&quot;#Docker-初体验&quot; class=&quot;headerlink&quot; title=&quot;Docker 初体验&quot;&gt;&lt;/a&gt;Docker 初体验&lt;/h1&gt;&lt;h3 id=&quot;前面看了那么多文字，可能还是不知道docker-怎么用。学编程少不
      
    
    </summary>
    
      <category term="开发工具" scheme="https://rstyro.github.io/blog/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Docker" scheme="https://rstyro.github.io/blog/tags/Docker/"/>
    
  </entry>
  
</feed>
